var $8zHUo$bnjs = require("bn.js");
var $8zHUo$projectserumanchor = require("@project-serum/anchor");
var $8zHUo$solanaspltoken = require("@solana/spl-token");
var $8zHUo$solanaweb3js = require("@solana/web3.js");
var $8zHUo$bonfidaaaob = require("@bonfida/aaob");
var $8zHUo$buffer = require("buffer");
var $8zHUo$isomorphicws = require("isomorphic-ws");
var $8zHUo$process = require("process");

var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "default", () => $882b6d93070905b3$export$2e2bcd8739ae039);
var $21fde1b806d22d52$exports = {};
$21fde1b806d22d52$exports = JSON.parse('{"version":"0.1.0","name":"dex","constants":[{"name":"NAME_LEN","type":{"defined":"u64"},"value":"16"},{"name":"MAX_OUTRIGHTS","type":{"defined":"u64"},"value":"128"},{"name":"MAX_PRODUCTS","type":{"defined":"u64"},"value":"256"},{"name":"HEALTH_BUFFER_LEN","type":{"defined":"u64"},"value":"32"},{"name":"MAX_TRADER_POSITIONS","type":{"defined":"u64"},"value":"16"},{"name":"MAX_OPEN_ORDERS_PER_POSITION","type":"u64","value":"256"},{"name":"MAX_OPEN_ORDERS","type":{"defined":"u64"},"value":"1024"},{"name":"ANCHOR_DISCRIMINANT_LEN","type":{"defined":"u64"},"value":"8"},{"name":"SENTINEL","type":{"defined":"u64"},"value":"0"},{"name":"CALLBACK_INFO_LEN","type":"u64","value":"40"},{"name":"CALLBACK_ID_LEN","type":"u64","value":"32"},{"name":"MAX_COMBOS","type":{"defined":"u64"},"value":"128"},{"name":"MAX_LEGS","type":{"defined":"u64"},"value":"4"},{"name":"SLOTS_1_MIN","type":"u64","value":"150"},{"name":"SLOTS_5_MIN","type":"u64","value":"750"},{"name":"SLOTS_15_MIN","type":"u64","value":"2250"},{"name":"SLOTS_60_MIN","type":"u64","value":"9000"}],"instructions":[{"name":"initializeMarketProductGroup","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"marketProductGroupVault","isMut":true,"isSigner":false},{"name":"vaultMint","isMut":false,"isSigner":false},{"name":"feeCollector","isMut":false,"isSigner":false},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"sysvarRent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"feeOutputRegister","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":false,"isSigner":false},{"name":"stakingFeeCollector","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"InitializeMarketProductGroupParams"}}]},{"name":"updateMarketProductGroup","accounts":[{"name":"authority","isMut":true,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"feeCollector","isMut":false,"isSigner":false},{"name":"stakingFeeCollector","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"UpdateMarketProductGroupParams"}}]},{"name":"updateVarianceCache","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"traderRiskStateAcct","isMut":true,"isSigner":false},{"name":"riskAndFeeSigner","isMut":false,"isSigner":false},{"name":"covarianceMetadata","isMut":true,"isSigner":false},{"name":"correlationMatrix","isMut":true,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[]},{"name":"initializeMarketProduct","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"orderbook","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"InitializeMarketProductParams"}}]},{"name":"deactivateMarketProduct","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"aaobProgram","isMut":false,"isSigner":false},{"name":"orderbook","isMut":true,"isSigner":false},{"name":"marketSigner","isMut":false,"isSigner":false},{"name":"eventQueue","isMut":true,"isSigner":false},{"name":"bids","isMut":true,"isSigner":false},{"name":"asks","isMut":true,"isSigner":false}],"args":[]},{"name":"removeMarketProduct","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false}],"args":[]},{"name":"lockCollateral","accounts":[{"name":"user","isMut":true,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"feeOutputRegister","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"riskAndFeeSigner","isMut":false,"isSigner":false},{"name":"feeStateAcct","isMut":true,"isSigner":false},{"name":"riskStateAcct","isMut":true,"isSigner":false}],"args":[{"name":"params","type":{"defined":"LockCollateralParams"}}]},{"name":"initializePrintTrade","accounts":[{"name":"user","isMut":true,"isSigner":true},{"name":"creator","isMut":false,"isSigner":false},{"name":"counterparty","isMut":false,"isSigner":false},{"name":"operator","isMut":false,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"printTrade","isMut":true,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"operatorOwner","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"InitializePrintTradeParams"}}]},{"name":"signPrintTrade","accounts":[{"name":"user","isMut":true,"isSigner":true},{"name":"creator","isMut":true,"isSigner":false},{"name":"counterparty","isMut":true,"isSigner":false},{"name":"operator","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"printTrade","isMut":true,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"feeOutputRegister","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"riskAndFeeSigner","isMut":false,"isSigner":false},{"name":"creatorTraderFeeStateAcct","isMut":true,"isSigner":false},{"name":"creatorTraderRiskStateAcct","isMut":true,"isSigner":false},{"name":"counterpartyTraderFeeStateAcct","isMut":true,"isSigner":false},{"name":"counterpartyTraderRiskStateAcct","isMut":true,"isSigner":false},{"name":"operatorOwner","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"SignPrintTradeParams"}}]},{"name":"closeTraderRiskGroup","accounts":[{"name":"owner","isMut":true,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"receiver","isMut":true,"isSigner":false}],"args":[]},{"name":"initializeTraderRiskGroup","accounts":[{"name":"owner","isMut":true,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":false},{"name":"traderRiskStateAcct","isMut":true,"isSigner":true},{"name":"traderFeeStateAcct","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"newOrder","accounts":[{"name":"user","isMut":true,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"aaobProgram","isMut":false,"isSigner":false},{"name":"orderbook","isMut":true,"isSigner":false},{"name":"marketSigner","isMut":false,"isSigner":false},{"name":"eventQueue","isMut":true,"isSigner":false},{"name":"bids","isMut":true,"isSigner":false},{"name":"asks","isMut":true,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":true,"isSigner":false},{"name":"traderFeeStateAcct","isMut":true,"isSigner":false},{"name":"feeOutputRegister","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"traderRiskStateAcct","isMut":true,"isSigner":false},{"name":"riskAndFeeSigner","isMut":false,"isSigner":false},{"name":"referrerTrg","isMut":true,"isSigner":false,"docs":["referrer_trg receives a programmatic percentage of taker fees","sdks route this back to the user\'s trg","frontends will want to route this to their own trg"]},{"name":"covarianceMetadata","isMut":true,"isSigner":false},{"name":"correlationMatrix","isMut":true,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[{"name":"params","type":{"defined":"NewOrderParams"}}]},{"name":"consumeOrderbookEvents","accounts":[{"name":"aaobProgram","isMut":false,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"marketSigner","isMut":false,"isSigner":false},{"name":"orderbook","isMut":true,"isSigner":false},{"name":"eventQueue","isMut":true,"isSigner":false},{"name":"rewardTarget","isMut":true,"isSigner":true},{"name":"feeModelProgram","isMut":false,"isSigner":false},{"name":"feeModelConfigurationAcct","isMut":true,"isSigner":false},{"name":"feeOutputRegister","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"riskAndFeeSigner","isMut":false,"isSigner":false},{"name":"sAcct","isMut":true,"isSigner":false},{"name":"rAcct","isMut":true,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[{"name":"params","type":{"defined":"ConsumeOrderbookEventsParams"}}]},{"name":"cancelOrder","accounts":[{"name":"user","isMut":false,"isSigner":true},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"aaobProgram","isMut":false,"isSigner":false},{"name":"orderbook","isMut":true,"isSigner":false},{"name":"marketSigner","isMut":false,"isSigner":false},{"name":"eventQueue","isMut":true,"isSigner":false},{"name":"bids","isMut":true,"isSigner":false},{"name":"asks","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"traderRiskStateAcct","isMut":true,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"CancelOrderParams"}}]},{"name":"depositFunds","accounts":[{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"user","isMut":false,"isSigner":true},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"marketProductGroupVault","isMut":true,"isSigner":false},{"name":"capitalLimits","isMut":false,"isSigner":false},{"name":"whitelistAtaAcct","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"DepositFundsParams"}}]},{"name":"withdrawFunds","accounts":[{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"user","isMut":false,"isSigner":true},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"marketProductGroupVault","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"traderRiskStateAcct","isMut":true,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":false},{"name":"capitalLimits","isMut":false,"isSigner":false},{"name":"covarianceMetadata","isMut":true,"isSigner":false},{"name":"correlationMatrix","isMut":true,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[{"name":"params","type":{"defined":"WithdrawFundsParams"}}]},{"name":"updateProductFunding","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"product","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"UpdateProductFundingParams"}}]},{"name":"transferFullPosition","accounts":[{"name":"liquidator","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"liquidateeRiskGroup","isMut":true,"isSigner":false},{"name":"liquidatorRiskGroup","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"liquidatorRiskStateAccountInfo","isMut":true,"isSigner":false},{"name":"liquidateeRiskStateAccountInfo","isMut":true,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":false}],"args":[]},{"name":"initializeCombo","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"orderbook","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"InitializeComboParams"}}]},{"name":"updateTraderFunding","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"riskEngineProgram","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"traderRiskStateAccountInfo","isMut":true,"isSigner":false},{"name":"riskModelConfigurationAcct","isMut":false,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":false}],"args":[]},{"name":"updateTraderRiskGroupOwner","accounts":[{"name":"owner","isMut":false,"isSigner":false},{"name":"traderRiskGroup","isMut":true,"isSigner":false},{"name":"newOwner","isMut":false,"isSigner":false}],"args":[]},{"name":"clearExpiredOrderbook","accounts":[{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"product","isMut":false,"isSigner":false},{"name":"aaobProgram","isMut":false,"isSigner":false},{"name":"orderbook","isMut":false,"isSigner":false},{"name":"marketSigner","isMut":false,"isSigner":false},{"name":"eventQueue","isMut":true,"isSigner":false},{"name":"bids","isMut":true,"isSigner":false},{"name":"asks","isMut":true,"isSigner":false}],"args":[{"name":"params","type":{"defined":"ClearExpiredOrderbookParams"}}]},{"name":"sweepFees","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"feeCollector","isMut":false,"isSigner":false},{"name":"marketProductGroupVault","isMut":true,"isSigner":false},{"name":"feeCollectorTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"chooseSuccessor","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"newAuthority","isMut":false,"isSigner":false}],"args":[]},{"name":"claimAuthority","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"newAuthority","isMut":false,"isSigner":true}],"args":[]}],"accounts":[{"name":"PaddedMarketProductGroup","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"name","type":{"array":["u8",16]}},{"name":"authority","type":"publicKey"},{"name":"successor","type":"publicKey"},{"name":"vaultMint","type":"publicKey"},{"name":"collectedFees","type":{"defined":"Fractional"}},{"name":"feeCollector","type":"publicKey"},{"name":"decimals","type":"u64"},{"name":"riskEngineProgramId","type":"publicKey"},{"name":"feeModelProgramId","type":"publicKey"},{"name":"feeModelConfigurationAcct","type":"publicKey"},{"name":"riskModelConfigurationAcct","type":"publicKey"},{"name":"activeFlagsProducts","type":{"defined":"Bitset"}},{"name":"ewmaWindows","type":{"array":["u64",4]}},{"name":"marketProducts","type":{"defined":"PaddedProductArray"}},{"name":"vaultBump","type":"u16"},{"name":"riskAndFeeBump","type":"u16"},{"name":"findFeesDiscriminantLen","type":"u16"},{"name":"validateAccountDiscriminantLen","type":"u16"},{"name":"findFeesDiscriminant","type":{"array":["u8",8]}},{"name":"validateAccountHealthDiscriminant","type":{"array":["u8",8]}},{"name":"validateAccountLiquidationDiscriminant","type":{"array":["u8",8]}},{"name":"createRiskStateAccountDiscriminant","type":{"array":["u8",8]}},{"name":"maxMakerFeeBps","type":"i16"},{"name":"minMakerFeeBps","type":"i16"},{"name":"maxTakerFeeBps","type":"i16"},{"name":"minTakerFeeBps","type":"i16"},{"name":"feeOutputRegister","type":"publicKey"},{"name":"riskOutputRegister","type":"publicKey"},{"name":"sequenceNumber","type":"u128"}]}},{"name":"PaddedTraderRiskGroup","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"marketProductGroup","type":"publicKey"},{"name":"owner","type":"publicKey"},{"name":"activeProducts","type":{"array":["u8",128]}},{"name":"totalDeposited","type":{"defined":"Fractional"}},{"name":"totalWithdrawn","type":{"defined":"Fractional"}},{"name":"cashBalance","type":{"defined":"Fractional"}},{"name":"pendingCashBalance","type":{"defined":"Fractional"}},{"name":"pendingFees","type":{"defined":"Fractional"}},{"name":"validUntil","type":"u64"},{"name":"makerFeeBps","type":"i32"},{"name":"takerFeeBps","type":"i32"},{"name":"traderPositions","type":{"array":[{"defined":"PaddedTraderPosition"},16]}},{"name":"riskStateAccount","type":"publicKey"},{"name":"feeStateAccount","type":"publicKey"},{"name":"clientOrderId","type":"u128"},{"name":"openOrders","type":{"defined":"PaddedOpenOrders"}}]}},{"name":"ProductArray","type":{"kind":"struct","fields":[{"name":"array","type":{"array":[{"defined":"Product"},256]}}]}},{"name":"PrintTrade","type":{"kind":"struct","fields":[{"name":"creator","type":"publicKey"},{"name":"counterparty","type":"publicKey"},{"name":"marketProductGroup","type":"publicKey"},{"name":"product","type":"publicKey"},{"name":"size","type":{"defined":"Fractional"}},{"name":"price","type":{"defined":"Fractional"}},{"name":"side","type":{"defined":"Side"}}]}},{"name":"RiskOutputRegister","type":{"kind":"struct","fields":[{"name":"riskEngineOutput","type":{"defined":"HealthResult"}}]}},{"name":"TraderRiskGroup","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"marketProductGroup","type":"publicKey"},{"name":"owner","type":"publicKey"},{"name":"activeProducts","type":{"array":["u8",128]}},{"name":"totalDeposited","type":{"defined":"Fractional"}},{"name":"totalWithdrawn","type":{"defined":"Fractional"}},{"name":"cashBalance","type":{"defined":"Fractional"}},{"name":"pendingCashBalance","type":{"defined":"Fractional"}},{"name":"pendingFees","type":{"defined":"Fractional"}},{"name":"validUntil","type":"u64"},{"name":"makerFeeBps","type":"i32"},{"name":"takerFeeBps","type":"i32"},{"name":"traderPositions","type":{"array":[{"defined":"TraderPosition"},16]}},{"name":"riskStateAccount","type":"publicKey"},{"name":"feeStateAccount","type":"publicKey"},{"name":"clientOrderId","type":"u128"},{"name":"openOrders","type":{"defined":"OpenOrders"}}]}}],"types":[{"name":"Side","type":{"kind":"enum","variants":[{"name":"Bid"},{"name":"Ask"}]}},{"name":"SelfTradeBehavior","type":{"kind":"enum","variants":[{"name":"DecrementTake"},{"name":"CancelProvide"},{"name":"AbortTransaction"}]}},{"name":"Params","type":{"kind":"struct","fields":[{"name":"quantity","type":{"defined":"Fractional"}}]}},{"name":"CallBackInfo","type":{"kind":"struct","fields":[{"name":"userAccount","type":"publicKey"},{"name":"openOrdersIdx","type":"u64"}]}},{"name":"TraderFees","type":{"kind":"struct","fields":[{"name":"validUntil","type":"u64"},{"name":"makerFeeBps","type":"i32"},{"name":"takerFeeBps","type":"i32"}]}},{"name":"TraderFeeParams","type":{"kind":"struct","fields":[{"name":"side","type":{"defined":"Side"}},{"name":"isAggressor","type":"bool"},{"name":"matchedQuoteQty","type":{"defined":"Fractional"}},{"name":"matchedBaseQty","type":{"defined":"Fractional"}},{"name":"product","type":"publicKey"}]}},{"name":"PaddedMarketProductGroup","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"name","type":{"array":["u8",16]}},{"name":"authority","type":"publicKey"},{"name":"successor","type":"publicKey"},{"name":"vaultMint","type":"publicKey"},{"name":"collectedFees","type":{"defined":"Fractional"}},{"name":"feeCollector","type":"publicKey"},{"name":"decimals","type":"u64"},{"name":"riskEngineProgramId","type":"publicKey"},{"name":"feeModelProgramId","type":"publicKey"},{"name":"feeModelConfigurationAcct","type":"publicKey"},{"name":"riskModelConfigurationAcct","type":"publicKey"},{"name":"activeFlagsProducts","type":{"defined":"Bitset"}},{"name":"ewmaWindows","type":{"array":["u64",4]}},{"name":"marketProducts","type":{"defined":"PaddedProductArray"}},{"name":"vaultBump","type":"u16"},{"name":"riskAndFeeBump","type":"u16"},{"name":"findFeesDiscriminantLen","type":"u16"},{"name":"validateAccountDiscriminantLen","type":"u16"},{"name":"findFeesDiscriminant","type":{"array":["u8",8]}},{"name":"validateAccountHealthDiscriminant","type":{"array":["u8",8]}},{"name":"validateAccountLiquidationDiscriminant","type":{"array":["u8",8]}},{"name":"createRiskStateAccountDiscriminant","type":{"array":["u8",8]}},{"name":"maxMakerFeeBps","type":"i16"},{"name":"minMakerFeeBps","type":"i16"},{"name":"maxTakerFeeBps","type":"i16"},{"name":"minTakerFeeBps","type":"i16"},{"name":"feeOutputRegister","type":"publicKey"},{"name":"riskOutputRegister","type":"publicKey"},{"name":"sequenceNumber","type":"u128"}]}},{"name":"PriceEwma","type":{"kind":"struct","fields":[{"name":"ewmaBid","type":{"array":[{"defined":"Fractional"},4]}},{"name":"ewmaAsk","type":{"array":[{"defined":"Fractional"},4]}},{"name":"bid","type":{"defined":"Fractional"}},{"name":"ask","type":{"defined":"Fractional"}},{"name":"slot","type":"u64"},{"name":"prevBid","type":{"defined":"Fractional"}},{"name":"prevAsk","type":{"defined":"Fractional"}}]}},{"name":"PaddedProductArray","type":{"kind":"struct","fields":[{"name":"array","type":{"array":[{"defined":"PaddedProduct"},256]}}]}},{"name":"OpenOrdersMetadata","type":{"kind":"struct","fields":[{"name":"askQtyInBook","type":{"defined":"Fractional"}},{"name":"bidQtyInBook","type":{"defined":"Fractional"}},{"name":"headIndex","type":"u64"},{"name":"numOpenOrders","type":"u64"}]}},{"name":"PaddedOpenOrders","type":{"kind":"struct","fields":[{"name":"freeListHead","type":"u64"},{"name":"totalOpenOrders","type":"u64"},{"name":"products","type":{"array":[{"defined":"OpenOrdersMetadata"},256]}},{"name":"orders","type":{"array":[{"defined":"OpenOrdersNode"},1024]}}]}},{"name":"OpenOrders","type":{"kind":"struct","fields":[{"name":"freeListHead","type":"u64"},{"name":"totalOpenOrders","type":"u64"},{"name":"products","type":{"array":[{"defined":"OpenOrdersMetadata"},256]}},{"name":"orders","type":{"array":[{"defined":"OpenOrdersNode"},1024]}}]}},{"name":"OpenOrdersNode","type":{"kind":"struct","fields":[{"name":"id","type":"u128"},{"name":"qty","type":"u64"},{"name":"clientId","type":"u64"},{"name":"prev","type":"u64"},{"name":"next","type":"u64"}]}},{"name":"PaddedOutright","type":{"kind":"struct","fields":[{"name":"metadata","type":{"defined":"ProductMetadata"}},{"name":"numQueueEvents","type":"u64"},{"name":"productStatus","type":{"defined":"ProductStatus"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"dust","type":{"defined":"Fractional"}},{"name":"cumFundingPerShare","type":{"defined":"Fractional"}},{"name":"cumSocialLossPerShare","type":{"defined":"Fractional"}},{"name":"openLongInterest","type":{"defined":"Fractional"}},{"name":"openShortInterest","type":{"defined":"Fractional"}},{"name":"padding","type":{"array":["u64",14]}}]}},{"name":"Outright","type":{"kind":"struct","fields":[{"name":"metadata","type":{"defined":"ProductMetadata"}},{"name":"numQueueEvents","type":"u64"},{"name":"productStatus","type":{"defined":"ProductStatus"}},{"name":"dust","type":{"defined":"Fractional"}},{"name":"cumFundingPerShare","type":{"defined":"Fractional"}},{"name":"cumSocialLossPerShare","type":{"defined":"Fractional"}},{"name":"openLongInterest","type":{"defined":"Fractional"}},{"name":"openShortInterest","type":{"defined":"Fractional"}},{"name":"padding","type":{"array":["u64",14]}}]}},{"name":"ProductMetadata","type":{"kind":"struct","fields":[{"name":"bump","type":"u64"},{"name":"productKey","type":"publicKey"},{"name":"name","type":{"array":["u8",16]}},{"name":"orderbook","type":"publicKey"},{"name":"tickSize","type":{"defined":"Fractional"}},{"name":"baseDecimals","type":"u64"},{"name":"priceOffset","type":{"defined":"Fractional"}},{"name":"contractVolume","type":{"defined":"Fractional"}},{"name":"prices","type":{"defined":"PriceEwma"}}]}},{"name":"PaddedCombo","type":{"kind":"struct","fields":[{"name":"metadata","type":{"defined":"ProductMetadata"}},{"name":"numLegs","type":"u64"},{"name":"legs","type":{"array":[{"defined":"Leg"},4]}},{"name":"padding0","type":{"array":["u8",8]}}]}},{"name":"Combo","type":{"kind":"struct","fields":[{"name":"metadata","type":{"defined":"ProductMetadata"}},{"name":"numLegs","type":"u64"},{"name":"legs","type":{"array":[{"defined":"Leg"},4]}}]}},{"name":"Leg","type":{"kind":"struct","fields":[{"name":"productIndex","type":"u64"},{"name":"productKey","type":"publicKey"},{"name":"ratio","type":"i64"}]}},{"name":"HealthInfo","type":{"kind":"struct","fields":[{"name":"health","type":{"defined":"HealthStatus"}},{"name":"action","type":{"defined":"ActionStatus"}}]}},{"name":"LiquidationInfo","type":{"kind":"struct","fields":[{"name":"health","type":{"defined":"HealthStatus"}},{"name":"action","type":{"defined":"ActionStatus"}},{"name":"totalSocialLoss","type":{"defined":"Fractional"}},{"name":"liquidationPrice","type":{"defined":"Fractional"}},{"name":"socialLosses","type":{"array":[{"defined":"SocialLoss"},16]}}]}},{"name":"SocialLoss","type":{"kind":"struct","fields":[{"name":"productIndex","type":"u64"},{"name":"amount","type":{"defined":"Fractional"}}]}},{"name":"OrderInfo","type":{"kind":"struct","fields":[{"name":"totalOrderQty","type":{"defined":"Fractional"}},{"name":"matchedOrderQty","type":{"defined":"Fractional"}},{"name":"orderSide","type":{"defined":"Side"}},{"name":"isCombo","type":"bool"},{"name":"productIndex","type":"u64"},{"name":"operationType","type":{"defined":"OperationType"}},{"name":"oldAskQtyInBook","type":{"defined":"Fractional"}},{"name":"oldBidQtyInBook","type":{"defined":"Fractional"}}]}},{"name":"PaddedTraderRiskGroup","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"marketProductGroup","type":"publicKey"},{"name":"owner","type":"publicKey"},{"name":"activeProducts","type":{"array":["u8",128]}},{"name":"totalDeposited","type":{"defined":"Fractional"}},{"name":"totalWithdrawn","type":{"defined":"Fractional"}},{"name":"cashBalance","type":{"defined":"Fractional"}},{"name":"pendingCashBalance","type":{"defined":"Fractional"}},{"name":"pendingFees","type":{"defined":"Fractional"}},{"name":"validUntil","type":"u64"},{"name":"makerFeeBps","type":"i32"},{"name":"takerFeeBps","type":"i32"},{"name":"traderPositions","type":{"array":[{"defined":"PaddedTraderPosition"},16]}},{"name":"riskStateAccount","type":"publicKey"},{"name":"feeStateAccount","type":"publicKey"},{"name":"clientOrderId","type":"u128"},{"name":"openOrders","type":{"defined":"PaddedOpenOrders"}}]}},{"name":"PaddedTraderPosition","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"productKey","type":"publicKey"},{"name":"position","type":{"defined":"Fractional"}},{"name":"pendingPosition","type":{"defined":"Fractional"}},{"name":"productIndex","type":"u64"},{"name":"lastCumFundingSnapshot","type":{"defined":"Fractional"}},{"name":"lastSocialLossSnapshot","type":{"defined":"Fractional"}}]}},{"name":"TraderPosition","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"productKey","type":"publicKey"},{"name":"position","type":{"defined":"Fractional"}},{"name":"pendingPosition","type":{"defined":"Fractional"}},{"name":"productIndex","type":"u64"},{"name":"lastCumFundingSnapshot","type":{"defined":"Fractional"}},{"name":"lastSocialLossSnapshot","type":{"defined":"Fractional"}}]}},{"name":"Bitset","type":{"kind":"struct","fields":[{"name":"inner","type":{"array":["u128",2]}}]}},{"name":"Fractional","type":{"kind":"struct","fields":[{"name":"m","type":"i64"},{"name":"exp","type":"u64"}]}},{"name":"UpdateMarketProductGroupParams","type":{"kind":"struct","fields":[]}},{"name":"PrintTradeProductIndex","type":{"kind":"struct","fields":[{"name":"product_index","type":"u64"},{"name":"size","type":{"defined":"Fractional"}}]}},{"name":"InitializePrintTradeParams","type":{"kind":"struct","fields":[{"name":"numProducts","type":"u64"},{"name":"products","type":{"array":[{"defined":"PrintTradeProductIndex"},6]}},{"name":"price","type":{"defined":"Fractional"}},{"name":"side","type":{"defined":"Side"}},{"name":"operatorCreatorFeeProportion","type":{"defined":"Fractional"}},{"name":"operatorCounterpartyFeeProportion","type":{"defined":"Fractional"}},{"name":"isOperatorSigner","type":"bool"}]}},{"name":"LockCollateralProductIndex","type":{"kind":"struct","fields":[{"name":"productIndex","type":"u64"},{"name":"size","type":{"defined":"Fractional"}}]}},{"name":"LockCollateralParams","type":{"kind":"struct","fields":[{"name":"numProducts","type":"u64"},{"name":"products","type":{"array":[{"defined":"LockCollateralProductIndex"},6]}}]}},{"name":"SignPrintTradeParams","type":{"kind":"struct","fields":[{"name":"numProducts","type":"u64"},{"name":"products","type":{"array":[{"defined":"PrintTradeProductIndex"},6]}},{"name":"price","type":{"defined":"Fractional"}},{"name":"side","type":{"defined":"Side"}},{"name":"operatorCreatorFeeProportion","type":{"defined":"Fractional"}},{"name":"operatorCounterpartyFeeProportion","type":{"defined":"Fractional"}},{"name":"useLockedCollateral","type":"bool"}]}},{"name":"InitializeMarketProductGroupParams","type":{"kind":"struct","fields":[{"name":"name","type":{"array":["u8",16]}},{"name":"validateAccountDiscriminantLen","type":"u64"},{"name":"findFeesDiscriminantLen","type":"u64"},{"name":"validateAccountHealthDiscriminant","type":{"array":["u8",8]}},{"name":"validateAccountLiquidationDiscriminant","type":{"array":["u8",8]}},{"name":"createRiskStateAccountDiscriminant","type":{"array":["u8",8]}},{"name":"findFeesDiscriminant","type":{"array":["u8",8]}},{"name":"maxMakerFeeBps","type":"i16"},{"name":"minMakerFeeBps","type":"i16"},{"name":"maxTakerFeeBps","type":"i16"},{"name":"minTakerFeeBps","type":"i16"}]}},{"name":"InitializeMarketProductParams","type":{"kind":"struct","fields":[{"name":"name","type":{"array":["u8",16]}},{"name":"tickSize","type":{"defined":"Fractional"}},{"name":"baseDecimals","type":"u64"},{"name":"priceOffset","type":{"defined":"Fractional"}}]}},{"name":"NewOrderParams","type":{"kind":"struct","fields":[{"name":"side","type":{"defined":"Side"}},{"name":"maxBaseQty","type":{"defined":"Fractional"}},{"name":"orderType","type":{"defined":"OrderType"}},{"name":"selfTradeBehavior","type":{"defined":"SelfTradeBehavior"}},{"name":"matchLimit","type":"u64"},{"name":"limitPrice","type":{"defined":"Fractional"}},{"name":"referrerFeeBps","type":{"defined":"Fractional"}},{"name":"clientOrderId","type":"u64"}]}},{"name":"ConsumeOrderbookEventsParams","type":{"kind":"struct","fields":[{"name":"maxIterations","type":"u64"}]}},{"name":"CancelOrderParams","type":{"kind":"struct","fields":[{"name":"orderId","type":"u128"},{"name":"noErr","type":"bool"},{"name":"clientOrderId","type":"u64"}]}},{"name":"DepositFundsParams","type":{"kind":"struct","fields":[{"name":"quantity","type":{"defined":"Fractional"}}]}},{"name":"WithdrawFundsParams","type":{"kind":"struct","fields":[{"name":"quantity","type":{"defined":"Fractional"}}]}},{"name":"UpdateProductFundingParams","type":{"kind":"struct","fields":[{"name":"amount","type":{"defined":"Fractional"}},{"name":"expired","type":"bool"}]}},{"name":"InitializeComboParams","type":{"kind":"struct","fields":[{"name":"name","type":{"array":["u8",16]}},{"name":"tickSize","type":{"defined":"Fractional"}},{"name":"priceOffset","type":{"defined":"Fractional"}},{"name":"baseDecimals","type":"u64"},{"name":"ratios","type":{"vec":"i8"}}]}},{"name":"ClearExpiredOrderbookParams","type":{"kind":"struct","fields":[{"name":"numOrdersToCancel","type":"u8"}]}},{"name":"DomainOrProgramError","type":{"kind":"enum","variants":[{"name":"DexErr","fields":[{"defined":"DexError"}]},{"name":"UtilErr","fields":[{"defined":"UtilError"}]},{"name":"ProgramErr","fields":[{"defined":"ProgramError"}]},{"name":"Other","fields":[{"name":"code","type":"u32"},{"name":"msg","type":"string"}]}]}},{"name":"UtilError","type":{"kind":"enum","variants":[{"name":"AccountAlreadyInitialized"},{"name":"AccountUninitialized"},{"name":"DuplicateProductKey"},{"name":"PublicKeyMismatch"},{"name":"AssertionError"},{"name":"InvalidMintAuthority"},{"name":"IncorrectOwner"},{"name":"PublicKeysShouldBeUnique"},{"name":"NotRentExempt"},{"name":"NumericalOverflow"},{"name":"RoundError"},{"name":"DivisionbyZero"},{"name":"InvalidReturnValue"},{"name":"SqrtRootError"},{"name":"ZeroPriceError"},{"name":"ZeroQuantityError"},{"name":"SerializeError"},{"name":"DeserializeError"},{"name":"InvalidBitsetIndex"}]}},{"name":"DexError","type":{"kind":"enum","variants":[{"name":"ContractIsExpired"},{"name":"ContractIsNotExpired"},{"name":"InvalidSystemProgramAccount"},{"name":"InvalidAobProgramAccount"},{"name":"InvalidStateAccountOwner"},{"name":"InvalidOrderIndex"},{"name":"UserAccountFull"},{"name":"TransactionAborted"},{"name":"MissingUserAccount"},{"name":"OrderNotFound"},{"name":"NoOp"},{"name":"OutofFunds"},{"name":"UserAccountStillActive"},{"name":"MarketStillActive"},{"name":"InvalidMarketSignerAccount"},{"name":"InvalidOrderbookAccount"},{"name":"InvalidMarketAdminAccount"},{"name":"InvalidBaseVaultAccount"},{"name":"InvalidQuoteVaultAccount"},{"name":"FullMarketProductGroup"},{"name":"MissingMarketProduct"},{"name":"InvalidWithdrawalAmount"},{"name":"InvalidTakerTrader"},{"name":"FundsError"},{"name":"InactiveProductError"},{"name":"TooManyOpenOrdersError"},{"name":"NoMoreOpenOrdersError"},{"name":"NonZeroPriceTickExponentError"},{"name":"DuplicateProductNameError"},{"name":"InvalidRiskResponseError"},{"name":"InvalidAccountHealthError"},{"name":"OrderbookIsEmptyError"},{"name":"CombosNotRemoved"},{"name":"AccountNotLiquidable"},{"name":"FundingPrecisionError"},{"name":"ProductDecimalPrecisionError"},{"name":"ProductNotOutright"},{"name":"ProductNotCombo"},{"name":"InvalidSocialLossCalculation"},{"name":"ProductIndexMismatch"},{"name":"InvalidOrderID"},{"name":"InvalidBytesForZeroCopyDeserialization"}]}},{"name":"AccountTag","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"MarketProductGroup"},{"name":"TraderRiskGroup"},{"name":"TraderPosition"},{"name":"MarketProductGroupWithCombos"},{"name":"ComboGroup"},{"name":"Combo"},{"name":"RiskProfile"}]}},{"name":"ProductStatus","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"Initialized"},{"name":"Expired"},{"name":"Expiring"}]}},{"name":"OrderType","type":{"kind":"enum","variants":[{"name":"Limit"},{"name":"ImmediateOrCancel"},{"name":"FillOrKill"},{"name":"PostOnly"}]}},{"name":"PaddedProduct","type":{"kind":"enum","variants":[{"name":"Outright","fields":[{"name":"padding0","type":{"array":["u8",7]}},{"name":"outright","type":{"defined":"PaddedOutright"}}]},{"name":"Combo","fields":[{"name":"padding0","type":{"array":["u8",7]}},{"name":"combo","type":{"defined":"PaddedCombo"}}]}]}},{"name":"Product","type":{"kind":"enum","variants":[{"name":"Outright","fields":[{"name":"outright","type":{"defined":"Outright"}}]},{"name":"Combo","fields":[{"name":"combo","type":{"defined":"Combo"}}]}]}},{"name":"OperationType","type":{"kind":"enum","variants":[{"name":"NewOrder"},{"name":"CancelOrder"},{"name":"CheckHealth"},{"name":"PositionTransfer"},{"name":"ConsumeEvents"}]}},{"name":"HealthResult","type":{"kind":"enum","variants":[{"name":"Health","fields":[{"name":"health_info","type":{"defined":"HealthInfo"}}]},{"name":"Liquidation","fields":[{"name":"liquidation_info","type":{"defined":"LiquidationInfo"}}]}]}},{"name":"HealthStatus","type":{"kind":"enum","variants":[{"name":"Healthy"},{"name":"Unhealthy"},{"name":"Liquidatable"},{"name":"NotLiquidatable"}]}},{"name":"ActionStatus","type":{"kind":"enum","variants":[{"name":"Approved"},{"name":"NotApproved"}]}},{"name":"TwoIterators","type":{"kind":"enum","variants":[{"name":"A","fields":[{"defined":"X"}]},{"name":"B","fields":[{"defined":"Y"}]}]}}],"events":[{"name":"DexOrderSummary","fields":[{"name":"postedOrderId","type":{"option":"u128"},"index":false},{"name":"totalBaseQty","type":"u64","index":false},{"name":"totalQuoteQty","type":"u64","index":false},{"name":"totalBaseQtyPosted","type":"u64","index":false}]}]}');


var $12af3dcbf87eacd2$exports = {};
$12af3dcbf87eacd2$exports = JSON.parse('{"version":"0.1.0","name":"instruments","instructions":[{"name":"initializeDerivative","accounts":[{"name":"derivativeMetadata","isMut":true,"isSigner":false},{"name":"priceOracle","isMut":false,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"payer","isMut":true,"isSigner":true},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"clock","isMut":false,"isSigner":false}],"args":[{"name":"params","type":{"defined":"InitializeDerivativeParams"}}]},{"name":"settleDerivative","accounts":[{"name":"marketProductGroup","isMut":true,"isSigner":false},{"name":"derivativeMetadata","isMut":true,"isSigner":false},{"name":"priceOracle","isMut":false,"isSigner":false},{"name":"dexProgram","isMut":false,"isSigner":false},{"name":"clock","isMut":false,"isSigner":false}],"args":[]},{"name":"closeDerivativeAccount","accounts":[{"name":"derivativeMetadata","isMut":true,"isSigner":false},{"name":"closeAuthority","isMut":false,"isSigner":true},{"name":"destination","isMut":false,"isSigner":false}],"args":[]}],"accounts":[{"name":"DerivativeMetadata","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"expired","type":{"defined":"ExpirationStatus"}},{"name":"oracleType","type":{"defined":"OracleType"}},{"name":"instrumentType","type":{"defined":"InstrumentType"}},{"name":"bump","type":"u64"},{"name":"strike","type":{"defined":"Fractional"}},{"name":"initializationTime","type":"u64"},{"name":"fullFundingPeriod","type":"u64"},{"name":"minimumFundingPeriod","type":"u64"},{"name":"priceOracle","type":"publicKey"},{"name":"marketProductGroup","type":"publicKey"},{"name":"closeAuthority","type":"publicKey"},{"name":"clock","type":"publicKey"},{"name":"lastFundingTime","type":"u64"}]}},{"name":"PaddedDerivativeMetadata","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"AccountTag"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"expired","type":{"defined":"ExpirationStatus"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"oracleType","type":{"defined":"OracleType"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"instrumentType","type":{"defined":"InstrumentType"}},{"name":"padding0","type":{"array":["u8",7]}},{"name":"bump","type":"u64"},{"name":"strike","type":{"defined":"Fractional"}},{"name":"initializationTime","type":"u64"},{"name":"fullFundingPeriod","type":"u64"},{"name":"minimumFundingPeriod","type":"u64"},{"name":"priceOracle","type":"publicKey"},{"name":"marketProductGroup","type":"publicKey"},{"name":"closeAuthority","type":"publicKey"},{"name":"clock","type":"publicKey"},{"name":"lastFundingTime","type":"u64"}]}}],"types":[{"name":"InitializeDerivativeParams","type":{"kind":"struct","fields":[{"name":"instrumentType","docs":["CALL or PUT (perpetuals are just calls with 0 strike price)"],"type":{"defined":"InstrumentType"}},{"name":"strike","docs":["Strike price of an option, 0 for for perpetual swaps and futures"],"type":{"defined":"Fractional"}},{"name":"fullFundingPeriod","docs":["Number of seconds for a 100% interest payment"],"type":"u64"},{"name":"minimumFundingPeriod","docs":["Number of seconds for a minimum funding period (< 100%)"],"type":"u64"},{"name":"initializationTime","type":"u64"},{"name":"closeAuthority","type":"publicKey"},{"name":"oracleType","type":{"defined":"OracleType"}}]}},{"name":"DerivativeError","type":{"kind":"enum","variants":[{"name":"AccountAlreadyInitialized"},{"name":"InvalidSettlementTime"},{"name":"InvalidCreationTime"},{"name":"UninitializedAccount"},{"name":"InvalidSequenceNumber"},{"name":"UnsettledAccounts"},{"name":"InvalidOracleConfig"},{"name":"NumericalOverflow"},{"name":"CannotBeDeleted"},{"name":"ContractIsExpired"},{"name":"InvalidDate"},{"name":"InvalidAccount"}]}},{"name":"AccountTag","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"DerivativeMetadata"},{"name":"FixedIncomeMetadata"}]}},{"name":"InstrumentType","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"RecurringCall"},{"name":"RecurringPut"},{"name":"ExpiringCall"},{"name":"ExpiringPut"}]}},{"name":"OracleType","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"Pyth"},{"name":"Dummy"}]}},{"name":"Fractional","type":{"kind":"struct","fields":[{"name":"m","type":"i64"},{"name":"exp","type":"u64"}]}},{"name":"ExpirationStatus","type":{"kind":"enum","variants":[{"name":"Active"},{"name":"Expired"},{"name":"Expiring"}]}}]}');


var $68ebc7704aa21a54$exports = {};
$68ebc7704aa21a54$exports = JSON.parse('{"version":"0.1.0","name":"risk_engine_program","constants":[{"name":"MAX_CORRELATION_SIZE","type":"u64","value":"8256"}],"instructions":[{"name":"validateAccountHealth","accounts":[{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"traderRiskGroup","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"varianceCache","isMut":true,"isSigner":false},{"name":"riskModelConfiguration","isMut":false,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":true},{"name":"covarianceMetadata","isMut":false,"isSigner":false},{"name":"correlationMatrix","isMut":false,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[]},{"name":"validateAccountLiquidation","accounts":[{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"traderRiskGroup","isMut":false,"isSigner":false},{"name":"riskOutputRegister","isMut":true,"isSigner":false},{"name":"varianceCache","isMut":true,"isSigner":false},{"name":"riskModelConfiguration","isMut":false,"isSigner":false},{"name":"riskSigner","isMut":false,"isSigner":true},{"name":"covarianceMetadata","isMut":false,"isSigner":false},{"name":"correlationMatrix","isMut":false,"isSigner":false},{"name":"markPrices","isMut":true,"isSigner":false}],"args":[]},{"name":"createRiskStateAccount","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"riskSigner","isMut":false,"isSigner":true},{"name":"varianceCache","isMut":true,"isSigner":true},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"initializeCovarianceMatrix","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"authority","isMut":false,"isSigner":true},{"name":"covarianceMetadata","isMut":true,"isSigner":false},{"name":"correlationMatrix","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"updateCovarianceMatrix","accounts":[{"name":"authority","isMut":false,"isSigner":true},{"name":"covarianceMetadata","isMut":true,"isSigner":false},{"name":"correlationMatrix","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false}],"args":[{"name":"productKeys","type":{"vec":"publicKey"}},{"name":"standardDeviations","type":{"vec":"f32"}},{"name":"correlations","type":{"vec":{"vec":"f32"}}}]},{"name":"initializeMarkPrices","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"authority","isMut":false,"isSigner":true},{"name":"markPrices","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"isHardcodedOracle","type":"bool"},{"name":"hardcodedOracle","type":{"vec":"publicKey"}},{"name":"hardcodedOracleType","type":{"defined":"OracleType"}}]},{"name":"updateMarkPrices","accounts":[{"name":"payer","isMut":true,"isSigner":true},{"name":"markPrices","isMut":true,"isSigner":false},{"name":"marketProductGroup","isMut":false,"isSigner":false}],"args":[]}],"accounts":[{"name":"CorrelationMatrix","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"RiskAccountTag"}},{"name":"numActiveProducts","type":"u64"},{"name":"correlations","type":{"array":["i8",8256]}}]}},{"name":"CovarianceMetadata","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"RiskAccountTag"}},{"name":"updateSlot","type":"u64"},{"name":"authority","type":"publicKey"},{"name":"numActiveProducts","type":"u64"},{"name":"productKeys","type":{"array":["publicKey",128]}},{"name":"standardDeviations","type":{"array":[{"defined":"FastInt"},128]}}]}},{"name":"MarkPricesArray","type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"updateSlot","type":"u64"},{"name":"array","type":{"array":[{"defined":"MarkPrice"},64]}}]}},{"name":"PaddedMarkPricesArray","type":{"kind":"struct","fields":[{"name":"bump","type":"u8"},{"name":"isHardcodedOracle","type":"bool"},{"name":"hardcodedOracle","type":"publicKey"},{"name":"padding0","type":{"array":["u8",6]}},{"name":"hardcodedOracleType","type":{"defined":"OracleType"}},{"name":"padding2","type":{"array":["u8",7]}},{"name":"array","type":{"array":[{"defined":"PaddedMarkPrice"},64]}}]}},{"name":"VarianceCache","type":{"kind":"struct","fields":[{"name":"tag","type":{"defined":"RiskAccountTag"}},{"name":"updateSlot","type":"u64"},{"name":"positionValue","type":{"defined":"FastInt"}},{"name":"totalVariance","type":{"defined":"FastInt"}},{"name":"openOrderVariance","type":{"defined":"FastInt"}},{"name":"productIndexes","type":{"array":["u64",32]}},{"name":"positions","type":{"array":[{"defined":"FastInt"},32]}},{"name":"sigmaP","type":{"array":[{"defined":"FastInt"},32]}}]}}],"types":[{"name":"OracleType","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"Pyth"},{"name":"Dummy"}]}},{"name":"FastInt","type":{"kind":"struct","fields":[{"name":"value","type":"i128"}]}},{"name":"Fractional","type":{"kind":"struct","fields":[{"name":"m","type":"i64"},{"name":"exp","type":"u64"}]}},{"name":"MarkPrice","type":{"kind":"struct","fields":[{"name":"productKey","type":"publicKey"},{"name":"markPrice","type":{"defined":"FastInt"}},{"name":"prevOracleMinusBookEwma","type":{"defined":"FastInt"}},{"name":"oracleMinusBookEwma","type":{"defined":"FastInt"}},{"name":"updateSlot","type":"u64"},{"name":"qualifyingBidPrice","type":{"option":{"defined":"Fractional"}}},{"name":"qualifyingAskPrice","type":{"option":{"defined":"Fractional"}}}]}},{"name":"PaddedMarkPrice","type":{"kind":"struct","fields":[{"name":"productKey","type":"publicKey"},{"name":"markPrice","type":{"defined":"FastInt"}},{"name":"prevOracleMinusBookEwma","type":{"defined":"FastInt"}},{"name":"oracleMinusBookEwma","type":{"defined":"FastInt"}},{"name":"updateSlot","type":"u64"},{"name":"isQualifyingBidPriceSome","type":"bool"},{"name":"padding0","type":{"array":["u8",7]}},{"name":"qualifyingBidPrice","type":{"defined":"Fractional"}},{"name":"isQualifyingBidPriceSome","type":"bool"},{"name":"padding0","type":{"array":["u8",7]}},{"name":"qualifyingBidPrice","type":{"defined":"Fractional"}}]}},{"name":"RiskError","type":{"kind":"enum","variants":[{"name":"InvalidAccountTag"},{"name":"AccountAlreadyInitialized"},{"name":"InvalidRiskSigner"},{"name":"InvalidAccountOwner"},{"name":"InvalidAccountAddress"},{"name":"InvalidCovarianceAuthority"},{"name":"InvalidCovarianceMatrixAccess"},{"name":"MissingCovarianceEntry"},{"name":"InvalidSqrtInput"},{"name":"InvalidCovarianceInput"},{"name":"MissingBBOForMarkPrice"},{"name":"NumericalOverflow"},{"name":"UnexpectedProductType"},{"name":"UnexpectedResult"},{"name":"MismatchedRiskStateAccount"},{"name":"FailedToFindCacheIndexForLeg"},{"name":"ComboSizeGreaterThanCollectionLen"},{"name":"InvalidMarkPriceAccountsLen"},{"name":"MismatchedOraclePriceAccount"},{"name":"MissingMarkPrice"},{"name":"IncorrectMarkPricesBump"},{"name":"MarkPricesArrayIsFull"},{"name":"MarkPricesOutOfDate"}]}},{"name":"RiskAccountTag","type":{"kind":"enum","variants":[{"name":"Uninitialized"},{"name":"CovarianceMetadata"},{"name":"CorrelationMatrix"},{"name":"VarianceCache"}]}}]}');








var $882b6d93070905b3$require$Buffer = $8zHUo$buffer.Buffer;

(0, ($parcel$interopDefault($8zHUo$bnjs))).prototype.toJSON = function() {
    return (0, ($parcel$interopDefault($8zHUo$bnjs))).prototype.toString.call(this, 10);
};

const $882b6d93070905b3$var$WebSocket = ($parcel$interopDefault($8zHUo$isomorphicws));

$parcel$global.Buffer = $parcel$global.Buffer || $8zHUo$buffer.Buffer;
Object.defineProperty((0, $8zHUo$bonfidaaaob.EventQueueHeader), "LEN", {
    configurable: true,
    writable: true,
    value: 33
});
const $882b6d93070905b3$var$DEX_ID = new (0, $8zHUo$solanaweb3js.PublicKey)("FUfpR31LmcP1VSbz5zDaM7nxnH55iBHkpwusgrnhaFjL");
const $882b6d93070905b3$var$INSTRUMENTS_ID = new (0, $8zHUo$solanaweb3js.PublicKey)("8981bZYszfz1FrFVx7gcUm61RfawMoAHnURuERRJKdkq");
const $882b6d93070905b3$var$RISK_ID = new (0, $8zHUo$solanaweb3js.PublicKey)("92wdgEqyiDKrcbFHoBTg8HxMj932xweRCKaciGSW3uMr");
// @ts-ignore
const $882b6d93070905b3$var$DEX_IDL = (0, (/*@__PURE__*/$parcel$interopDefault($21fde1b806d22d52$exports)));
// @ts-ignore
const $882b6d93070905b3$var$INSTRUMENTS_IDL = (0, (/*@__PURE__*/$parcel$interopDefault($12af3dcbf87eacd2$exports)));
// @ts-ignore
const $882b6d93070905b3$var$RISK_IDL = (0, (/*@__PURE__*/$parcel$interopDefault($68ebc7704aa21a54$exports)));
const $882b6d93070905b3$var$SENTINEL = 0;
const $882b6d93070905b3$var$UNINITIALIZED = "11111111111111111111111111111111";
const $882b6d93070905b3$var$SYSTEM_PROGRAM_ID = "11111111111111111111111111111111";
const $882b6d93070905b3$var$MPG_SIZE = 143912;
const $882b6d93070905b3$var$TRG_SIZE = 64272;
const $882b6d93070905b3$var$MAX_OUTRIGHTS = 128;
const $882b6d93070905b3$var$MAX_COMPUTE_UNITS = 1400000; // 1.4m is solana's max
const $882b6d93070905b3$var$MAX_CANCELS_PER_TX = 8;
let $882b6d93070905b3$var$rpc2manifest = new Map(); // maps rpc url to manifest (AAOB, DEX, FEES, RISK, MPGs, products, orderbooks, etc.)
let $882b6d93070905b3$var$account2WebSocket = new Map(); // maps rpc:account to websocket
const $882b6d93070905b3$var$bnSqrt = (num)=>{
    if (num.lt(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0))) throw new Error("Sqrt only works on non-negtiave inputs");
    if (num.lt(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(2))) return num;
    const smallCand = $882b6d93070905b3$var$bnSqrt(num.shrn(2)).shln(1);
    const largeCand = smallCand.add(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1));
    if (largeCand.mul(largeCand).gt(num)) return smallCand;
    else return largeCand;
};
class $882b6d93070905b3$var$ReliableWebSocket {
    ref = 1;
    eventQueueSeqNum = 0;
    constructor(socket){
        this.socket = socket;
        this.isClosed = false;
    }
    close() {
        if (--this.ref == 0) {
            this.isClosed = true;
            this.socket.close();
        }
    }
    addRef() {
        this.ref++;
        return this;
    }
}
function $882b6d93070905b3$var$toWebSocket(httpEndpoint) {
    return httpEndpoint.replace("https://", "wss://").replace("http://", "ws://").replace("localhost:8899", "localhost:8900");
}
class $882b6d93070905b3$var$Order {
    constructor(id, productName, productIndex, price, qty, isBid){
        this.id = id;
        this.productName = productName;
        this.productIndex = productIndex;
        this.price = price;
        this.qty = qty;
        this.isBid = isBid;
    }
}
class $882b6d93070905b3$var$Manifest {
    constructor(fields){
        this.fields = fields;
        if (this.fields.rpc.toLowerCase().includes("devnet")) this.base_api_url = "http://theo-publi-v73qtzqb8eja-694197461.eu-west-2.elb.amazonaws.com/";
        else this.base_api_url = "https://dexterity.hxro.com/";
    }
    setWallet(wallet) {
        const confirmOptions = {
            preflightCommitment: "processed"
        };
        const connection = new (0, $8zHUo$solanaweb3js.Connection)(this.fields.rpc, confirmOptions.preflightCommitment);
        const provider = new (0, $8zHUo$projectserumanchor.AnchorProvider)(connection, wallet, confirmOptions);
        let dexProgram = $882b6d93070905b3$var$createDexProgram(provider);
        let instrumentsProgram = $882b6d93070905b3$var$createInstrumentsProgram(provider);
        let riskProgram = $882b6d93070905b3$var$createRiskProgram(provider);
        this.fields.dexProgram = dexProgram;
        this.fields.instrumentsProgram = instrumentsProgram;
        this.fields.riskProgram = riskProgram;
        this.fields.wallet = wallet;
    }
    static GetRiskAndFeeSigner(mpg) {
        return (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            mpg.toBuffer()
        ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
    }
    getRiskS(mpg) {
        return (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            $882b6d93070905b3$require$Buffer.from("s", "utf-8"),
            mpg.toBuffer()
        ], new (0, $8zHUo$solanaweb3js.PublicKey)(this.fields.risk_id))[0];
    }
    getRiskR(mpg) {
        return (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            $882b6d93070905b3$require$Buffer.from("r", "utf-8"),
            mpg.toBuffer()
        ], new (0, $8zHUo$solanaweb3js.PublicKey)(this.fields.risk_id))[0];
    }
    static async GetATAFromMPGObject(mpg, wallet) {
        return await (0, $8zHUo$solanaspltoken.getAssociatedTokenAddress)(mpg.vaultMint, wallet);
    }
    accountSubscribe(pk, parseDataFn, onUpdateFn, useCache = true) {
        const pkStr = pk.toBase58();
        const key = this.fields.rpc + ":" + pkStr;
        let socket = new $882b6d93070905b3$var$WebSocket($882b6d93070905b3$var$toWebSocket(this.fields.rpc));
        socket.addEventListener("open", (_)=>{
            socket.send(JSON.stringify({
                "jsonrpc": "2.0",
                "id": 1,
                "method": "accountSubscribe",
                "params": [
                    pkStr,
                    {
                        "encoding": "base64",
                        "commitment": "processed"
                    }
                ]
            }));
        });
        socket.addEventListener("error", async (event)=>{
        // console.log(event);
        // console.error(`websocket for ${pkStr} saw error event ${event}`);
        });
        socket.addEventListener("message", (async (event)=>{
            const msg = JSON.parse(event.data);
            if (typeof msg.result === "number") // initial PONG gives {"jsonrpc": "2.0","result":<SOME NUMBER>,"id":1}
            return;
            onUpdateFn(await parseDataFn($882b6d93070905b3$require$Buffer.from(msg.params.result.value.data[0], "base64"), this), msg.params.result.context.slot);
        }).bind(this));
        let rws = new $882b6d93070905b3$var$ReliableWebSocket(socket);
        socket.addEventListener("close", async (_)=>{
            if (rws.isClosed) {
                console.debug("closed websocket on purpose");
                return;
            }
            const newRws = this.accountSubscribe(pk, parseDataFn, onUpdateFn);
            rws.socket = newRws.socket;
            console.debug("server closed the websocket to", pkStr, "so we re-opened it");
        });
        // @ts-ignore
        rws.getSnapshot = (async ()=>{
            const accinfo = await this.fields.connection.getAccountInfo(pk);
            onUpdateFn(await parseDataFn(accinfo.data, this));
        }).bind(this);
        // @ts-ignore
        rws.getSnapshot();
        return rws;
    }
    static GetMarkPrice(markPrices, productKey) {
        for (const mp of markPrices.array){
            if (mp.productKey.equals(productKey)) return $882b6d93070905b3$var$Manifest.FromFastInt(mp.markPrice.value);
        }
        return $882b6d93070905b3$var$Fractional.Nan();
    }
    static GetMarkPriceOracleMinusBookEwma(markPrices, productKey) {
        for (const mp of markPrices.array){
            if (mp.productKey.equals(productKey)) return $882b6d93070905b3$var$Manifest.FromFastInt(mp.oracleMinusBookEwma.value);
        }
        return $882b6d93070905b3$var$Fractional.Nan();
    }
    static FromFastInt(bn) {
        return new $882b6d93070905b3$var$Fractional(bn, new (0, ($parcel$interopDefault($8zHUo$bnjs)))(6));
    }
    async getMPGFromData(data) {
        // @ts-ignore
        return await $882b6d93070905b3$var$Manifest.GetMPGFromData(this.fields.dexProgram, data);
    }
    static async GetMPGFromData(dexProgram, data) {
        // @ts-ignore
        return await dexProgram.account.paddedMarketProductGroup._coder.accounts.decodeUnchecked("PaddedMarketProductGroup", data);
    }
    async getMPG(mpg) {
        const mpgAccInfo = await this.fields.dexProgram.account.paddedMarketProductGroup.getAccountInfo(mpg);
        return await this.getMPGFromData(mpgAccInfo.data);
    }
    static GetProductsOfMPG(mpg) {
        let m = new Map();
        let i = -1;
        for (const p of mpg.marketProducts.array){
            i++;
            if ($882b6d93070905b3$var$productStatus(p, mpg.marketProducts.array) === "uninitialized") continue;
            m.set($882b6d93070905b3$var$bytesToString($882b6d93070905b3$var$productToMeta(p).name), {
                index: i,
                product: p
            });
        }
        return m;
    }
    static GetActiveProductsOfMPG(mpg) {
        let m = new Map();
        let i = -1;
        for (const p of mpg.marketProducts.array){
            i++;
            if ($882b6d93070905b3$var$productStatus(p, mpg.marketProducts.array) !== "initialized") continue;
            m.set($882b6d93070905b3$var$bytesToString($882b6d93070905b3$var$productToMeta(p).name), {
                index: i,
                product: p
            });
        }
        return m;
    }
    async getDerivativeMetadataFromData(data) {
        // @ts-ignore
        return await $882b6d93070905b3$var$Manifest.GetDerivativeMetadataFromData(this.fields.instrumentsProgram, data);
    }
    static async GetDerivativeMetadataFromData(instrumentsProgram, data) {
        // @ts-ignore
        return await instrumentsProgram.account.paddedDerivativeMetadata._coder.accounts.decodeUnchecked("PaddedDerivativeMetadata", data);
    }
    async getDerivativeMetadata(productKey) {
        const dmAccInfo = await this.fields.instrumentsProgram.account.paddedDerivativeMetadata.getAccountInfo(productKey);
        return await this.getDerivativeMetadataFromData(dmAccInfo.data);
    }
    async getTRGFromData(data) {
        // @ts-ignore
        return await this.fields.dexProgram.account.paddedTraderRiskGroup._coder.accounts.decodeUnchecked("PaddedTraderRiskGroup", data);
    }
    async getTRG(trg) {
        let accinfo = await this.fields.dexProgram.account.paddedTraderRiskGroup.getAccountInfo(trg);
        return await this.getTRGFromData(accinfo.data);
    }
    getMarkPricesAccount(mpg) {
        return (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            $882b6d93070905b3$require$Buffer.from("mark_prices", "utf-8"),
            mpg.toBuffer()
        ], new (0, $8zHUo$solanaweb3js.PublicKey)(this.fields.risk_id))[0];
    }
    ugh(str) {
        return new (0, $8zHUo$solanaweb3js.PublicKey)(str);
    }
    async getMarkPricesFromData(data) {
        // @ts-ignore
        return await this.fields.riskProgram.account.paddedMarkPricesArray._coder.accounts.decodeUnchecked("PaddedMarkPricesArray", data);
    }
    async getMarkPrices(markPricesAccount) {
        let accinfo = await this.fields.riskProgram.account.paddedMarkPricesArray.getAccountInfo(markPricesAccount);
        return await this.getMarkPricesFromData(accinfo.data);
    }
    async getVarianceCache(varianceCache) {
        const accinfo = await this.fields.connection.getAccountInfo(varianceCache);
        return accinfo.data;
    }
    async getCovarianceMetadata(marketProductGroup) {
        const accinfo = await this.fields.connection.getAccountInfo(this.getRiskS(marketProductGroup));
        return accinfo.data;
    }
    async getBook(product, marketState) {
        const offset = $882b6d93070905b3$var$Fractional.From(product.metadata.priceOffset);
        const tickSize = $882b6d93070905b3$var$Fractional.From(product.metadata.tickSize);
        const baseDecimals = product.metadata.baseDecimals;
        const bidsSlab = await marketState.loadBidsSlab(this.fields.connection, "processed");
        const bids = [];
        for (const order of bidsSlab.items(true))bids.push({
            quantity: new $882b6d93070905b3$var$Fractional(order.baseQuantity, baseDecimals),
            price: $882b6d93070905b3$var$Manifest.aaobOrderToDexPrice(order, tickSize, offset),
            info: bidsSlab.getCallBackInfo(order.callBackInfoPt),
            key: order.key.toString()
        });
        const asksSlab = await marketState.loadAsksSlab(this.fields.connection, "processed");
        const asks = [];
        for (const order1 of asksSlab.items(true))asks.push({
            quantity: new $882b6d93070905b3$var$Fractional(order1.baseQuantity, baseDecimals),
            price: $882b6d93070905b3$var$Manifest.aaobOrderToDexPrice(order1, tickSize, offset),
            info: asksSlab.getCallBackInfo(order1.callBackInfoPt),
            key: order1.key.toString()
        });
        return {
            bids: bids,
            asks: asks
        };
    }
    static aaobOrderToDexPrice(aaobOrder, tickSize, offset) {
        return new $882b6d93070905b3$var$Fractional(aaobOrder.getPrice().shrn(32), new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)).mul(tickSize).sub(offset);
    }
    static orderIdToDexPrice(id, tickSize, offset) {
        return new $882b6d93070905b3$var$Fractional(id.shrn(96), new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)).div(tickSize).sub(offset);
    }
    static orderIdIsBid(id) {
        return (id.shrn(63) & 1) != 0;
    }
    streamBooks(product, marketState, onBookFn, onMarkPricesFn = null) {
        const offset = $882b6d93070905b3$var$Fractional.From(product.metadata.priceOffset);
        const tickSize = $882b6d93070905b3$var$Fractional.From(product.metadata.tickSize);
        const baseDecimals = product.metadata.baseDecimals;
        let [bids, asks] = [
            [],
            []
        ];
        const bidsSocket = this.accountSubscribe(marketState.bids, async (data, manifest)=>{
            bids = [];
            const slab = (0, $8zHUo$bonfidaaaob.Slab).deserialize(data, marketState.callBackInfoLen);
            for (const order of slab.items(true))bids.push({
                quantity: new $882b6d93070905b3$var$Fractional(order.baseQuantity, baseDecimals),
                price: $882b6d93070905b3$var$Manifest.aaobOrderToDexPrice(order, tickSize, offset),
                info: slab.getCallBackInfo(order.callBackInfoPt),
                key: order.key.toString()
            });
            return {
                bids: bids,
                asks: asks
            };
        }, onBookFn);
        const asksSocket = this.accountSubscribe(marketState.asks, async (data, manifest)=>{
            asks = [];
            const slab = (0, $8zHUo$bonfidaaaob.Slab).deserialize(data, marketState.callBackInfoLen);
            for (const order of slab.items(true))asks.push({
                quantity: new $882b6d93070905b3$var$Fractional(order.baseQuantity, baseDecimals),
                price: $882b6d93070905b3$var$Manifest.aaobOrderToDexPrice(order, tickSize, offset),
                info: slab.getCallBackInfo(order.callBackInfoPt),
                key: order.key.toString()
            });
            return {
                bids: bids,
                asks: asks
            };
        }, onBookFn);
        let markPricesSocket = null;
        if (onMarkPricesFn !== null) {
            const productPk = product.metadata.productKey.toString();
            let mpgPk = null;
            for (const [pk, { pubkey: pubkey , mpg: mpg  }] of this.fields.mpgs){
                for (let [productName, { index: index , product: product1  }] of $882b6d93070905b3$var$Manifest.GetProductsOfMPG(mpg)){
                    const meta = $882b6d93070905b3$var$productToMeta(product1);
                    if (meta.productKey.toString() === productPk) {
                        mpgPk = pubkey;
                        break;
                    }
                }
                if (mpgPk !== null) break;
            }
            if (mpgPk === null) throw new Error("failed to find mpg associated to the product " + productPk);
            markPricesSocket = this.accountSubscribe(this.getMarkPricesAccount(mpgPk), async (data, manifest)=>{
                return await this.getMarkPricesFromData(data);
            }, onMarkPricesFn);
        }
        return {
            asksSocket: asksSocket,
            bidsSocket: bidsSocket,
            markPricesSocket: markPricesSocket
        };
    }
    streamTrades(product, marketState, onTradesFn) {
        const offsetFrac = $882b6d93070905b3$var$Fractional.From(product.metadata.priceOffset);
        const socket = this.accountSubscribe(marketState.eventQueue, async (data, manifest)=>{
            const eventQueue = (0, $8zHUo$bonfidaaaob.EventQueue).parse(marketState.callBackInfoLen, data);
            const seqNum = eventQueue.header.seqNum.toNumber();
            const count = eventQueue.header.count.toNumber();
            if (seqNum <= socket.eventQueueSeqNum || count == 0) return [];
            socket.eventQueueSeqNum = seqNum;
            const fills = eventQueue.parseFill();
            const trades = [];
            for (const fill of fills){
                const baseQty = $882b6d93070905b3$var$Fractional.New(fill.baseSize, product.metadata.baseDecimals);
                // TODO idk why typescript doesn't believe "EventFill | EventOut" has the field "quoteSize"
                // @ts-ignore
                const quoteQty = $882b6d93070905b3$var$Fractional.New(fill.quoteSize, product.metadata.baseDecimals);
                trades.push({
                    price: quoteQty.div(baseQty).mul($882b6d93070905b3$var$Fractional.From(product.metadata.tickSize)).sub(offsetFrac),
                    quantity: baseQty,
                    // TODO idk why typescript doesn't believe "EventFill | EventOut" has the field "takerSide"
                    // @ts-ignore
                    isBidAgressor: fill.takerSide === 0
                });
            }
            return trades;
        }, onTradesFn);
        return socket;
    }
    streamMPG(mpg, onUpdateFn) {
        return this.accountSubscribe(mpg, (async (data, manifest)=>await this.getMPGFromData(data)).bind(this), onUpdateFn);
    }
    // returns list of public keys
    async getTRGsOfOwner(owner, marketProductGroup = null) {
        const dexProgram = this.fields.dexProgram;
        const filters = [
            {
                dataSize: $882b6d93070905b3$var$TRG_SIZE
            },
            {
                memcmp: {
                    offset: 48,
                    bytes: owner.toBase58()
                }
            }, 
        ];
        if (marketProductGroup !== null) filters.push({
            memcmp: {
                offset: 16,
                bytes: marketProductGroup.toBase58()
            }
        });
        const accounts = await dexProgram.provider.connection.getParsedProgramAccounts(dexProgram.programId, {
            filters: filters
        });
        const trgs = [];
        await Promise.all(accounts.map(async ({ account: account , pubkey: pubkey  }, i)=>{
            trgs.push({
                pubkey: pubkey,
                trg: await this.getTRGFromData(account.data)
            });
        }));
        return trgs;
    }
    async getTRGsOfWallet(marketProductGroup = null) {
        return await this.getTRGsOfOwner(this.fields.wallet.publicKey, marketProductGroup);
    }
    async closeTrg(marketProductGroup, traderRiskGroup) {
        const dexProgram = this.fields.dexProgram;
        const connection = this.fields.dexProgram.provider.connection;
        const wallet = this.fields.wallet;
        {
            const tx = new (0, $8zHUo$solanaweb3js.Transaction)().add(await dexProgram.instruction.closeTraderRiskGroup({
                accounts: {
                    owner: wallet.publicKey,
                    traderRiskGroup: traderRiskGroup,
                    marketProductGroup: marketProductGroup,
                    receiver: wallet.publicKey
                }
            }));
            try {
                let { blockhash: blockhash  } = await connection.getRecentBlockhash();
                tx.recentBlockhash = blockhash;
                tx.feePayer = wallet.publicKey;
                const signedTx = await wallet.signTransaction(tx);
                const sig = await connection.sendRawTransaction(signedTx.serialize());
                await connection.confirmTransaction(sig); // TODO: indicate to user that the transaction is being confirmed
            } catch (e) {
                console.error(e);
                console.error(e.logs);
                return null;
            }
        }
    }
    async createTrg(marketProductGroup) {
        const dexProgram = this.fields.dexProgram;
        const connection = this.fields.dexProgram.provider.connection;
        const wallet = this.fields.wallet;
        const mpg = await this.getMPG(marketProductGroup);
        const riskStateAccount = new (0, $8zHUo$solanaweb3js.Keypair)();
        const traderRiskGroup = new (0, $8zHUo$solanaweb3js.Keypair)();
        const [traderFeeAccount, traderFeeAccountBump] = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            marketProductGroup.toBuffer(),
            traderRiskGroup.publicKey.toBuffer(),
            mpg.feeModelConfigurationAcct.toBuffer()
        ], this.fields.fees_id);
        const riskAndFeeSigner = $882b6d93070905b3$var$Manifest.GetRiskAndFeeSigner(marketProductGroup);
        {
            // create trg account ix + intialize trg ix
            const rentExemptionAmount = await connection.getMinimumBalanceForRentExemption($882b6d93070905b3$var$TRG_SIZE);
            const tx = new (0, $8zHUo$solanaweb3js.Transaction)().add(await dexProgram.account.traderRiskGroup.createInstruction(traderRiskGroup, $882b6d93070905b3$var$TRG_SIZE)).add(await dexProgram.instruction.initializeTraderRiskGroup({
                accounts: {
                    owner: wallet.publicKey,
                    traderRiskGroup: traderRiskGroup.publicKey,
                    marketProductGroup: marketProductGroup,
                    riskSigner: riskAndFeeSigner,
                    traderRiskStateAcct: riskStateAccount.publicKey,
                    traderFeeStateAcct: traderFeeAccount,
                    riskEngineProgram: this.fields.risk_id,
                    feeModelConfigurationAcct: mpg.feeModelConfigurationAcct,
                    feeModelProgram: this.fields.fees_id,
                    systemProgram: (0, $8zHUo$solanaweb3js.SystemProgram).programId
                }
            }));
            try {
                let { blockhash: blockhash  } = await connection.getRecentBlockhash();
                tx.recentBlockhash = blockhash;
                tx.feePayer = wallet.publicKey;
                tx.sign(traderRiskGroup, riskStateAccount);
                const signedTx = await wallet.signTransaction(tx);
                const sig = await connection.sendRawTransaction(signedTx.serialize());
                await connection.confirmTransaction(sig); // TODO: indicate to user that the transaction is being confirmed
            } catch (e) {
                console.error(e);
                console.error(e.logs);
                return null;
            }
        }
        return traderRiskGroup.publicKey;
    }
    async fetchOrderbooks(marketProductGroup = null) {
        const confirmOptions = {
            preflightCommitment: "processed"
        }; // TODO: pull from this
        for (const [k, { pubkey: pubkey , mpg: mpg , orderbooks: orderbooks , covarianceMetadata: covarianceMetadata  }] of this.fields.mpgs){
            if (marketProductGroup !== null && !pubkey.equals(marketProductGroup)) continue;
            for (let [productName, { index: index , product: product  }] of $882b6d93070905b3$var$Manifest.GetActiveProductsOfMPG(mpg)){
                // await new Promise(_ => { setTimeout(100); });
                const meta = $882b6d93070905b3$var$productToMeta(product);
                let marketState = null;
                try {
                    marketState = await (0, $8zHUo$bonfidaaaob.MarketState).retrieve(this.fields.connection, meta.orderbook, confirmOptions.preflightCommitment);
                } catch (e) {
                    // this assumes the orderbook is missing because it has been removed via expire bot
                    console.debug("potentially missing orderbook");
                    console.debug(e);
                }
                orderbooks.set(meta.orderbook.toBase58(), marketState);
            }
            this.fields.mpgs.set(k, {
                pubkey: pubkey,
                mpg: mpg,
                orderbooks: orderbooks,
                covarianceMetadata: covarianceMetadata
            });
        }
    }
    async fetchOrderbook(orderbook) {
        const confirmOptions = {
            preflightCommitment: "processed"
        }; // TODO: pull from this
        let result = null;
        for (const [k, { pubkey: pubkey , mpg: mpg , orderbooks: orderbooks , covarianceMetadata: covarianceMetadata  }] of this.fields.mpgs){
            for (let [productName, { index: index , product: product  }] of $882b6d93070905b3$var$Manifest.GetActiveProductsOfMPG(mpg)){
                const meta = $882b6d93070905b3$var$productToMeta(product);
                if (meta.orderbook.equals(orderbook)) {
                    const marketState = await (0, $8zHUo$bonfidaaaob.MarketState).retrieve(this.fields.connection, orderbook, confirmOptions.preflightCommitment);
                    result = marketState;
                    orderbooks.set(orderbook.toBase58(), marketState);
                    break;
                }
            }
            if (result !== null) {
                this.fields.mpgs.set(k, {
                    pubkey: pubkey,
                    mpg: mpg,
                    orderbooks: orderbooks,
                    covarianceMetadata: covarianceMetadata
                });
                break;
            }
        }
        return result;
    }
    async getFills(productName, trg, before, after) {
        try {
            let url = `${this.base_api_url}/fills?product=${productName}`;
            if (trg != null) url += `&trg=${trg}`;
            if (before != null && before > 0) url += `&before=${before}`;
            if (after != null && after > 0) url += `&after=${after}`;
            const response = await fetch(url, {
                method: "GET",
                headers: {
                    Accept: "application/json"
                }
            });
            if (!response.ok) throw new Error(`Failed to fetch fills: ${response.status}`);
            const result = await response.json();
            return result;
        } catch (error) {
            if (error instanceof Error) {
                console.log("error message: ", error.message);
                return error.message;
            } else {
                console.log("unexpected error: ", error);
                return "An unexpected error occurred";
            }
        }
    }
    async updateOrderbooks(marketProductGroup) {
        const { pubkey: pubkey , mpg: mpg , orderbooks: orderbooks  } = this.fields.mpgs.get(marketProductGroup.toBase58());
        for (let [productName, { index: index , product: product  }] of $882b6d93070905b3$var$Manifest.GetActiveProductsOfMPG(mpg)){
            const meta = $882b6d93070905b3$var$productToMeta(product);
            // console.log('fetching orderbook', productName, meta.orderbook.toBase58());
            try {
                const marketState = await (0, $8zHUo$bonfidaaaob.MarketState).retrieve(this.fields.dexProgram.provider.connection, meta.orderbook, "processed");
                orderbooks.set(meta.orderbook.toBase58(), marketState);
            } catch  {
                console.log("failed to retrieve orderbook", meta.orderbook.toBase58());
            }
        }
    }
    async updateCovarianceMetadatas() {
        const newMpgs = new Map();
        for (const [k, obj] of this.fields.mpgs){
            obj.covarianceMetadata = await this.getCovarianceMetadata(obj.pubkey);
            newMpgs.set(k, obj);
        }
        this.fields.mpgs = newMpgs;
    }
    // gets BN representation of 'size' bytes at 'offset' within data (uint8array)
    static GetRiskNumber(data, offset, size, isSigned = true) {
        if (isSigned) return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(data.slice(offset, offset + size), undefined, "le").fromTwos(size * 8);
        return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(data.slice(offset, offset + size), undefined, "le");
    }
    getStds(marketProductGroup) {
        const { covarianceMetadata: covarianceMetadata  } = this.fields.mpgs.get(marketProductGroup.toBase58());
        let offset = 56; // authority pubkey
        const numActiveProducts = $882b6d93070905b3$var$Manifest.GetRiskNumber(covarianceMetadata, offset, 8, false);
        offset += 8;
        let stds = new Map();
        for(let i = 0; i < numActiveProducts; i++){
            const pubkey = new (0, $8zHUo$solanaweb3js.PublicKey)(covarianceMetadata.slice(offset + 32 * i, offset + 32 * (i + 1)));
            const std = $882b6d93070905b3$var$Manifest.FromFastInt($882b6d93070905b3$var$Manifest.GetRiskNumber(covarianceMetadata, offset + $882b6d93070905b3$var$MAX_OUTRIGHTS * 32 + 16 * i, 16, true));
            stds.set(pubkey.toBase58(), std);
        }
        return stds;
    }
}
async function $882b6d93070905b3$var$getManifest(rpc, useCache = false, wallet) {
    const key = wallet ? wallet.publicKey + ":" + rpc : ":" + rpc;
    console.debug("getting manifest", key);
    if (useCache && $882b6d93070905b3$var$rpc2manifest.has(key)) {
        console.debug("using cache to get manifest", key);
        return $882b6d93070905b3$var$rpc2manifest.get(key);
    }
    const confirmOptions = {
        preflightCommitment: "processed"
    };
    const connection = new (0, $8zHUo$solanaweb3js.Connection)(rpc, confirmOptions.preflightCommitment);
    const provider = new (0, $8zHUo$projectserumanchor.AnchorProvider)(connection, wallet, confirmOptions);
    let dexProgram = $882b6d93070905b3$var$createDexProgram(provider);
    let instrumentsProgram = $882b6d93070905b3$var$createInstrumentsProgram(provider);
    let riskProgram = $882b6d93070905b3$var$createRiskProgram(provider);
    let aaob_id = null;
    let fees_id = null;
    let risk_id = null;
    const accounts = await connection.getParsedProgramAccounts($882b6d93070905b3$var$DEX_ID, {
        filters: [
            {
                dataSize: $882b6d93070905b3$var$MPG_SIZE
            }
        ]
    });
    const mpgs = new Map();
    for (const [i, { account: account , pubkey: pubkey  }] of accounts.entries()){
        const mpg = await $882b6d93070905b3$var$Manifest.GetMPGFromData(dexProgram, account.data);
        risk_id = mpg.riskEngineProgramId;
        fees_id = mpg.feeModelProgramId;
        const orderbooks = new Map();
        for (let [productName, { index: index , product: product  }] of $882b6d93070905b3$var$Manifest.GetProductsOfMPG(mpg)){
            const meta = $882b6d93070905b3$var$productToMeta(product);
            if (aaob_id === null) {
                const accinfo = await connection.getAccountInfo(meta.orderbook);
                if (accinfo === null) continue;
                aaob_id = accinfo.owner;
            }
        }
        mpgs.set(pubkey.toBase58(), {
            pubkey: pubkey,
            mpg: mpg,
            orderbooks: orderbooks
        });
    }
    if (risk_id == null || fees_id == null || aaob_id == null) throw new Error("failed to find a single mpg");
    const manifest = new $882b6d93070905b3$var$Manifest({
        rpc: rpc,
        wallet: wallet,
        connection: connection,
        dexProgram: dexProgram,
        instrumentsProgram: instrumentsProgram,
        riskProgram: riskProgram,
        aaob_id: aaob_id,
        dex_id: $882b6d93070905b3$var$DEX_ID,
        fees_id: fees_id,
        risk_id: risk_id,
        mpgs: mpgs,
        creationTime: Date.now()
    });
    $882b6d93070905b3$var$rpc2manifest.set(key, manifest);
    console.debug("cached manifest", rpc);
    console.debug("got manifest", manifest);
    return manifest;
}
async function $882b6d93070905b3$var$getAccountAtDate(publicKey, date) {
    let paramsStr = `?timestamps=${date.getTime()}`;
    const result = await $882b6d93070905b3$var$_getAccountAt(publicKey, paramsStr);
    return {
        date: new Date(result[0]),
        data: result[1]
    };
}
async function $882b6d93070905b3$var$getAccountAtSlot(publicKey, slot) {
    let paramsStr = `?slots=${slot}`;
    const result = await $882b6d93070905b3$var$_getAccountAt(publicKey, paramsStr);
    return {
        slot: result[0],
        data: result[1]
    };
}
async function $882b6d93070905b3$var$_getAccountAt(publicKey, paramsStr) {
    const SOLRAY_SECRET = $8zHUo$process?.env?.API_SECRET ?? "";
    const timestamp = Date.now();
    const authHeader = `Basic ${btoa(`:${SOLRAY_SECRET}`)}`;
    const url = `https://solray.app/api/accounts/${publicKey.toString()}${paramsStr}`;
    const response = await fetch(url, {
        headers: {
            Authorization: authHeader
        }
    });
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    const result = (await response.json())[0];
    const binaryString = atob(result[1]);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for(let i = 0; i < len; i++)bytes[i] = binaryString.charCodeAt(i);
    return [
        result[0],
        $882b6d93070905b3$require$Buffer.from(bytes)
    ];
}
function $882b6d93070905b3$var$bytesToString(bytes) {
    return bytes.map((c)=>String.fromCharCode(c)).join("");
}
function $882b6d93070905b3$var$ten() {
    return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(10);
}
function $882b6d93070905b3$var$zero() {
    return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0);
}
function $882b6d93070905b3$var$one() {
    return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1);
}
function $882b6d93070905b3$var$negativeOne() {
    return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(-1);
}
class $882b6d93070905b3$var$Fractional {
    constructor(m, exp){
        this.m = m;
        this.exp = exp;
        this._isNan = false;
    }
    // Fractional.New accepts numbers
    // whereas the constructor accepts BNs
    static New(m, exp) {
        return new $882b6d93070905b3$var$Fractional(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(m), new (0, ($parcel$interopDefault($8zHUo$bnjs)))(exp));
    }
    static From(simple) {
        return $882b6d93070905b3$var$Fractional.New(simple.m, simple.exp);
    }
    static FromString(s) {
        if (isNaN(parseFloat(s))) return $882b6d93070905b3$var$Fractional.Nan();
        const i = s.indexOf(".");
        if (i < 0) return new $882b6d93070905b3$var$Fractional(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(s.replace(/\./g, "")), new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0));
        return new $882b6d93070905b3$var$Fractional(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(s.replace(/\./g, "")), new (0, ($parcel$interopDefault($8zHUo$bnjs)))(s.length - i - 1));
    }
    static Zero() {
        return $882b6d93070905b3$var$Fractional.New(0, 0);
    }
    static One() {
        return $882b6d93070905b3$var$Fractional.New(1, 0);
    }
    static NegativeOne() {
        return $882b6d93070905b3$var$Fractional.New(-1, 0);
    }
    static NoBidPrice() {
        return $882b6d93070905b3$var$Fractional.New(-9007199254740991, 0); // 64 bits cannot fit in BN :(
    }
    static NoAskPrice() {
        return $882b6d93070905b3$var$Fractional.New(9007199254740991, 0); // 64 bits cannot fit in BN :(
    }
    static Nan() {
        let f = $882b6d93070905b3$var$Fractional.Zero();
        f._isNan = true;
        return f;
    }
    isNan() {
        return this._isNan;
    }
    isZero() {
        if (this._isNan) return false;
        return this.m.isZero();
    }
    max(other) {
        if (this.gt(other)) return this.reduced();
        return other.reduced();
    }
    toNumber() {
        if (this._isNan) return NaN;
        return Math.floor(this.toDecimal());
    }
    toDecimal() {
        if (this._isNan) return NaN;
        let r = this.reduced();
        if (r.m.bitLength() > 53) {
            const bitDiff = r.m.bitLength() - 53 + 1;
            // 2^10 ~ 10^3, we need to convert base 2 powers to base 10 powers
            // so divide by 10 and multiply by 3
            r = r.round_down(r.exp.sub(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(Math.ceil(bitDiff / 10 * 3))));
        }
        return r.m.toNumber() / Math.pow(10, r.exp.toNumber());
    }
    // scale multiplies returns a new Fractional with this.m multiplied by c
    scale(c) {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        return new $882b6d93070905b3$var$Fractional(this.m.mul(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(c)), this.exp);
    }
    // scale multiplies returns a new Fractional with this.m divided by c
    scaledown(c) {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        return new $882b6d93070905b3$var$Fractional(this.m.div(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(c)), this.exp);
    }
    add(other) {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        const cmp = this.exp.cmp(other.exp);
        if (cmp == 0) return new $882b6d93070905b3$var$Fractional(this.m.add(other.m), this.exp);
        else if (cmp < 0) return new $882b6d93070905b3$var$Fractional(this.round_up(other.exp).m.add(other.m), other.exp);
        else return new $882b6d93070905b3$var$Fractional(other.round_up(this.exp).m.add(this.m), this.exp);
    }
    round_up(newExp) {
        if (newExp.lt(this.exp)) throw new Error("cannot use Fractional.round_up to round down");
        return new $882b6d93070905b3$var$Fractional(this.m.mul($882b6d93070905b3$var$ten().pow(newExp.sub(this.exp))), newExp);
    }
    round_down(newExp) {
        if (newExp.gt(this.exp)) throw new Error("cannot use Fractional.round_down to round up");
        return new $882b6d93070905b3$var$Fractional(this.m.div($882b6d93070905b3$var$ten().pow(this.exp.sub(newExp))), newExp);
    }
    sub(other) {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        return this.add(new $882b6d93070905b3$var$Fractional(other.m.mul($882b6d93070905b3$var$negativeOne()), other.exp));
    }
    sign() {
        if (this._isNan) return new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1);
        return this.m.isNeg() ? new (0, ($parcel$interopDefault($8zHUo$bnjs)))(-1) : new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1);
    }
    sqrt() {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        let m = this.m;
        let exp = this.exp;
        if (!exp.umod(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(2)).isZero()) {
            exp = exp.add(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1));
            m = m.mul(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(10));
        }
        m = m.mul(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(1000000));
        exp = exp.add(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(6));
        return new $882b6d93070905b3$var$Fractional($882b6d93070905b3$var$bnSqrt(this.m), exp.sub(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(9))).reduced();
    }
    abs() {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        return new $882b6d93070905b3$var$Fractional(this.m.abs(), this.exp);
    }
    div(other) {
        if (this._isNan || other._isNan || other.isZero()) return $882b6d93070905b3$var$Fractional.Nan();
        const sign = this.sign();
        const otherSign = other.sign();
        const exp = this.exp.sub(other.exp);
        const shift = !this.exp.isNeg() ? $882b6d93070905b3$var$ten() : $882b6d93070905b3$var$ten().sub(this.exp);
        const dividend = this.m.abs().mul($882b6d93070905b3$var$ten().pow(shift));
        const divisor = other.m.abs();
        const quotient = dividend.div(divisor);
        const newExp = exp.add(shift);
        const newSign = sign.mul(otherSign);
        return new $882b6d93070905b3$var$Fractional(newSign.mul(quotient), newExp).reduced();
    }
    mul(other) {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        const r1 = this.reduced();
        const r2 = other.reduced();
        return new $882b6d93070905b3$var$Fractional(r1.m.mul(r2.m), r1.exp.add(r2.exp));
    }
    reduced() {
        if (this._isNan) return $882b6d93070905b3$var$Fractional.Nan();
        if (this.exp.isZero()) return new $882b6d93070905b3$var$Fractional(this.m, this.exp);
        if (this.m.isZero()) return $882b6d93070905b3$var$Fractional.New(0, 0);
        let m = this.m;
        let exp = this.exp;
        while(m.umod($882b6d93070905b3$var$ten()).isZero() && exp.gt($882b6d93070905b3$var$zero())){
            m = m.div($882b6d93070905b3$var$ten());
            exp = exp.sub($882b6d93070905b3$var$one());
        }
        return new $882b6d93070905b3$var$Fractional(m, exp);
    }
    // cmp returns NaN if either is NaN
    // cmp returns -1 if this < other
    // cmp returns 0 if this == other
    // cmp returns +1 if this > other
    cmp(other) {
        if (this._isNan || other._isNan) return NaN;
        if (this.m.isZero() || other.m.isZero()) return this.m.cmp(other.m);
        const r1 = this.reduced();
        const r2 = other.reduced();
        if (r1.exp.eq(r2.exp)) return r1.m.cmp(r2.m);
        // trick here:
        // switch the exponents of r1 and r2 when comparing
        return r1.m.mul(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(10).pow(r2.exp)).cmp(r2.m.mul(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(10).pow(r1.exp)));
    }
    lt(other) {
        return this.cmp(other) < 0;
    }
    lte(other) {
        return this.cmp(other) <= 0;
    }
    eq(other) {
        return this.cmp(other) == 0;
    }
    gt(other) {
        return this.cmp(other) > 0;
    }
    gte(other) {
        return this.cmp(other) >= 0;
    }
    toString(fixedDecimals = null, isInsertCommas = false) {
        let result = this._toString(fixedDecimals);
        if (isInsertCommas) {
            let dotIndex = result.indexOf(".");
            if (dotIndex == -1) dotIndex = result.length;
            do {
                dotIndex -= 3;
                if (dotIndex <= 0 || dotIndex === 1 && result[0] === "-") break;
                result = result.slice(0, dotIndex) + "," + result.slice(dotIndex);
            }while (true);
        }
        return result;
    }
    _toString(fixedDecimals = null) {
        if (this._isNan) return "NaN";
        const reduced = this.reduced();
        const isNegative = reduced.m.negative == 1;
        let mstr = reduced.m.toString();
        if (reduced.exp.isZero()) {
            if (fixedDecimals === null || fixedDecimals === 0) return mstr;
            return mstr + "." + "0".repeat(fixedDecimals);
        }
        if (isNegative) mstr = mstr.slice(1, mstr.length);
        let result;
        if (reduced.exp < mstr.length) result = (mstr.slice(0, mstr.length - reduced.exp) + "." + mstr.slice(-reduced.exp)).replace(/0*$/g, "").replace(/\.$/g, "");
        else result = ("0." + "0".repeat(reduced.exp - mstr.length) + mstr).replace(/0*$/g, "").replace(/\.$/g, "");
        if (isNegative) result = "-" + result;
        if (fixedDecimals === null) return result;
        const dotIndex = result.indexOf(".");
        if (dotIndex == -1) {
            if (fixedDecimals === 0) return result;
            return result + "." + "0".repeat(fixedDecimals);
        }
        if (fixedDecimals === 0) return result.slice(0, dotIndex);
        const paddedZeros = dotIndex + fixedDecimals - result.length + 1;
        return result.slice(0, dotIndex + fixedDecimals + 1) + "0".repeat(paddedZeros > 0 ? paddedZeros : 0);
    }
}
const $882b6d93070905b3$var$NUM_LIQUIDATION_STDS = $882b6d93070905b3$var$Fractional.New(15, 1);
const $882b6d93070905b3$var$NUM_UNHEALTHY_STDS = $882b6d93070905b3$var$Fractional.New(3, 0);
function $882b6d93070905b3$var$getEnumVariantAsString(someEnum) {
    const props = Object.getOwnPropertyNames(someEnum);
    if (props.length !== 1) return "Invalid Enum";
    return props[0];
}
function $882b6d93070905b3$var$getPriceDecimals(meta) {
    //     // this is so hacky lol
    //     let tickSize = Fractional.From(meta.tickSize).toString();
    //     const i = tickSize.indexOf('.');
    //     if (i !== -1) {
    //         return tickSize.length - i - 1;
    //     }
    //     return 0;
    return meta.tickSize.exp.toNumber(); // assuming no trailing zeros
}
function $882b6d93070905b3$var$productStatus(p, productArray) {
    if (p.hasOwnProperty("outright")) return $882b6d93070905b3$var$getEnumVariantAsString(p.outright.outright.productStatus);
    for (const [i, leg] of p.combo.combo.legs.slice(0, p.combo.combo.numLegs.toNumber()).entries()){
        const status = $882b6d93070905b3$var$productStatus(productArray[leg.productIndex.toNumber()], productArray);
        if (status !== "initialized") return status;
    }
    return "initialized";
}
function $882b6d93070905b3$var$productToMeta(p) {
    if (p.hasOwnProperty("outright")) return p.outright.outright.metadata;
    else return p.combo.combo.metadata;
}
let $882b6d93070905b3$var$TraderUpdateType;
(function(TraderUpdateType) {
    TraderUpdateType[TraderUpdateType["TRG"] = 0] = "TRG";
    TraderUpdateType[TraderUpdateType["MPG"] = 1] = "MPG";
    TraderUpdateType[TraderUpdateType["Risk"] = 2] = "Risk";
    TraderUpdateType[TraderUpdateType["MarkPrices"] = 3] = "MarkPrices";
})($882b6d93070905b3$var$TraderUpdateType || ($882b6d93070905b3$var$TraderUpdateType = {}));
// one Trader per trader risk group
// one or more trader risk groups per market product group
class $882b6d93070905b3$var$Trader {
    constructor(manifest, traderRiskGroup, skipThingsThatRequireWalletConnection = false){
        this.manifest = manifest;
        this.traderRiskGroup = traderRiskGroup;
        this.skipThingsThatRequireWalletConnection = skipThingsThatRequireWalletConnection;
        this.isPaused = false;
        console.debug("trader:", this);
    }
    async timeTravelToDate(toDate) {
        this.disconnect();
        this.isPaused = true;
        this.trgDate = null;
        this.mpgDate = null;
        this.riskDate = null;
        this.markPricesDate = null;
        this.trgSlot = null;
        this.mpgSlot = null;
        this.riskSlot = null;
        this.markPricesSlot = null;
        // console.log('time travelling to ', toDate, 'old portfolio value', this.getPortfolioValue().toString(), 'old position value', this.getPositionValue().toString(), 'old cash', this.getNetCash().toString(), 'old PERP position', this.getPositions().get('BTCUSD-PERP     ').toString());
        let result = await $882b6d93070905b3$var$getAccountAtDate(this.marketProductGroup, toDate);
        this.mpg = await this.manifest.getMPGFromData(result.data);
        this.mpgDate = result.date;
        result = await $882b6d93070905b3$var$getAccountAtDate(this.traderRiskGroup, toDate);
        this.trg = await this.manifest.getTRGFromData(result.data);
        this.trgDate = result.date;
        result = await $882b6d93070905b3$var$getAccountAtDate(this.trg.riskStateAccount, toDate);
        this.varianceCache = result.data;
        this.riskDate = result.date;
        result = await $882b6d93070905b3$var$getAccountAtDate(this.markPricesAccount, toDate);
        this.markPrices = await this.manifest.getMarkPricesFromData(result.data);
        this.markPricesDate = result.date;
    // console.log('success! time travelled to', toDate, 'new portfolio value', this.getPortfolioValue().toString(), 'new position value', this.getPositionValue().toString(), 'new cash', this.getNetCash().toString(), 'new PERP position', this.getPositions().get('BTCUSD-PERP     ').toString());
    }
    getProducts() {
        return $882b6d93070905b3$var$Manifest.GetProductsOfMPG(this.mpg);
    }
    getPositions() {
        let m = new Map();
        for (let p of this.trg.traderPositions){
            if (p.productKey.toBase58() === $882b6d93070905b3$var$UNINITIALIZED || "uninitialized" in p.tag) continue;
            m.set($882b6d93070905b3$var$productToMeta(this.mpg.marketProducts.array[p.productIndex]).name.map((c)=>String.fromCharCode(c)).join(""), $882b6d93070905b3$var$Fractional.From(p.position));
        }
        return m;
    }
    async newOrder(productIndex, isBid, limitPrice, maxBaseQty, { onGettingBlockHashFn: onGettingBlockHashFn , onGotBlockHashFn: onGotBlockHashFn , onTxSentFn: onTxSentFn , onTxSuccessFn: onTxSuccessFn , onFailFn: onFailFn  } = {
        onGettingBlockHashFn: null,
        onGotBlockHashFn: null,
        onTxSentFn: null,
        onTxSuccessFn: null,
        onFailFn: null
    }, isIOC = false, referrerTrg = null, referrerFeeBps = null, clientOrderId = null, matchLimit = null) {
        const products = this.getProducts();
        let product = null;
        for (let { index: index , product: someProduct  } of products.values())if (index === productIndex) {
            product = someProduct;
            break;
        }
        if (product === null) throw new Error("could not place new order because no product with that index exists");
        if (product.hasOwnProperty("outright")) product = product.outright.outright;
        else product = product.combo.combo;
        const productPk = product.metadata.productKey;
        const orderbookPk = product.metadata.orderbook;
        const { orderbooks: orderbooks  } = this.manifest.fields.mpgs.get(this.marketProductGroup.toBase58());
        const orderbook = orderbooks.get(orderbookPk.toBase58());
        const side = isBid ? {
            bid: {}
        } : {
            ask: {}
        };
        const params = {
            side: side,
            maxBaseQty: {
                m: maxBaseQty.m,
                exp: maxBaseQty.exp
            },
            orderType: !isIOC ? {
                limit: {}
            } : {
                immediateOrCancel: {}
            },
            selfTradeBehavior: {
                cancelProvide: {}
            },
            matchLimit: matchLimit ?? new (0, ($parcel$interopDefault($8zHUo$bnjs)))(16),
            limitPrice: {
                m: limitPrice.m,
                exp: limitPrice.exp
            },
            referrerFeeBps: {
                m: referrerFeeBps ? referrerFeeBps.m : new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0),
                exp: referrerFeeBps ? referrerFeeBps.exp : new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)
            },
            clientOrderId: clientOrderId ?? new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)
        };
        try {
            const connection = this.manifest.fields.dexProgram.provider.connection;
            // @ts-ignore
            const wallet = this.manifest.fields.dexProgram.provider.wallet;
            // console.log(
            //     {
            //         // @ts-ignore
            //         user: this.manifest.fields.wallet.publicKey.toBase58(),
            //         traderRiskGroup: this.traderRiskGroup.toBase58(),
            //         marketProductGroup: this.marketProductGroup.toBase58(),
            //         product: productPk.toBase58(),
            //         aaobProgram: this.manifest.fields.aaob_id.toBase58(),
            //         orderbook: orderbookPk.toBase58(),
            //         marketSigner: orderbook.callerAuthority.toBase58(),
            //         eventQueue: orderbook.eventQueue.toBase58(),
            //         bids: orderbook.bids.toBase58(),
            //         asks: orderbook.asks.toBase58(),
            //         systemProgram: SystemProgram.programId.toBase58(),
            //         feeModelProgram: this.mpg.feeModelProgramId.toBase58(),
            //         feeModelConfigurationAcct: this.mpg.feeModelConfigurationAcct.toBase58(),
            //         traderFeeStateAcct: this.trg.feeStateAccount.toBase58(),
            //         feeOutputRegister: this.mpg.feeOutputRegister.toBase58(),
            //         riskEngineProgram: this.mpg.riskEngineProgramId.toBase58(),
            //         riskModelConfigurationAcct: this.mpg.riskModelConfigurationAcct.toBase58(),
            //         riskOutputRegister: this.mpg.riskOutputRegister.toBase58(),
            //         traderRiskStateAcct: this.trg.riskStateAccount.toBase58(),
            //         riskAndFeeSigner: Manifest.GetRiskAndFeeSigner(this.marketProductGroup).toBase58(),
            //         covarianceMetadata: this.manifest.getRiskS(this.marketProductGroup).toBase58(),
            //         correlationMatrix: this.manifest.getRiskR(this.marketProductGroup).toBase58(),
            //         markPrices: this.markPricesAccount.toBase58(),
            //         referrerTrg: referrerTrg ?? this.traderRiskGroup.toBase58(),
            //     }
            // );
            const tx = new (0, $8zHUo$solanaweb3js.Transaction)().add((0, $8zHUo$solanaweb3js.ComputeBudgetProgram).setComputeUnitLimit({
                units: $882b6d93070905b3$var$MAX_COMPUTE_UNITS
            }))// .add(this.getUpdateMarkPricesInstruction())
            .add(this.manifest.fields.dexProgram.instruction.newOrder(params, {
                accounts: {
                    // @ts-ignore
                    user: this.manifest.fields.wallet.publicKey,
                    traderRiskGroup: this.traderRiskGroup,
                    marketProductGroup: this.marketProductGroup,
                    product: productPk,
                    aaobProgram: this.manifest.fields.aaob_id,
                    orderbook: orderbookPk,
                    marketSigner: orderbook.callerAuthority,
                    eventQueue: orderbook.eventQueue,
                    bids: orderbook.bids,
                    asks: orderbook.asks,
                    systemProgram: (0, $8zHUo$solanaweb3js.SystemProgram).programId,
                    feeModelProgram: this.mpg.feeModelProgramId,
                    feeModelConfigurationAcct: this.mpg.feeModelConfigurationAcct,
                    traderFeeStateAcct: this.trg.feeStateAccount,
                    feeOutputRegister: this.mpg.feeOutputRegister,
                    riskEngineProgram: this.mpg.riskEngineProgramId,
                    riskModelConfigurationAcct: this.mpg.riskModelConfigurationAcct,
                    riskOutputRegister: this.mpg.riskOutputRegister,
                    traderRiskStateAcct: this.trg.riskStateAccount,
                    riskAndFeeSigner: $882b6d93070905b3$var$Manifest.GetRiskAndFeeSigner(this.marketProductGroup),
                    covarianceMetadata: this.manifest.getRiskS(this.marketProductGroup),
                    correlationMatrix: this.manifest.getRiskR(this.marketProductGroup),
                    markPrices: this.markPricesAccount,
                    referrerTrg: referrerTrg ?? this.traderRiskGroup
                }
            }));
            if (onGettingBlockHashFn) onGettingBlockHashFn();
            let { blockhash: blockhash  } = await connection.getRecentBlockhash();
            tx.recentBlockhash = blockhash;
            if (onGotBlockHashFn) onGotBlockHashFn();
            tx.feePayer = wallet.publicKey;
            const signedTx = await wallet.signTransaction(tx);
            const signature = await connection.sendRawTransaction(signedTx.serialize());
            if (onTxSentFn) onTxSentFn(signature);
            await connection.confirmTransaction(signature);
            if (onTxSuccessFn) onTxSuccessFn(signature);
        } catch (e) {
            if (onFailFn) onFailFn(e);
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    async updateVarianceCache() {
        const connection = this.manifest.fields.dexProgram.provider.connection;
        // @ts-ignore
        const wallet = this.manifest.fields.dexProgram.provider.wallet;
        const tx = new (0, $8zHUo$solanaweb3js.Transaction)().add((0, $8zHUo$solanaweb3js.ComputeBudgetProgram).setComputeUnitLimit({
            units: $882b6d93070905b3$var$MAX_COMPUTE_UNITS
        }))// .add(this.getUpdateMarkPricesInstruction())
        .add(await this.getUpdateVarianceCacheInstruction());
        let { blockhash: blockhash  } = await connection.getRecentBlockhash();
        tx.recentBlockhash = blockhash;
        tx.feePayer = wallet.publicKey;
        try {
            const updateVarianceCacheTx = await wallet.signTransaction(tx);
            const updateVarianceCacheSig = await connection.sendRawTransaction(updateVarianceCacheTx.serialize());
            await connection.confirmTransaction(updateVarianceCacheSig);
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    async getUpdateVarianceCacheInstruction() {
        const accounts = {
            // @ts-ignore
            user: this.manifest.fields.wallet.publicKey,
            traderRiskGroup: this.traderRiskGroup,
            marketProductGroup: this.marketProductGroup,
            systemProgram: (0, $8zHUo$solanaweb3js.SystemProgram).programId,
            riskEngineProgram: this.mpg.riskEngineProgramId,
            riskModelConfigurationAcct: this.mpg.riskModelConfigurationAcct,
            riskOutputRegister: this.mpg.riskOutputRegister,
            traderRiskStateAcct: this.trg.riskStateAccount,
            riskAndFeeSigner: $882b6d93070905b3$var$Manifest.GetRiskAndFeeSigner(this.marketProductGroup),
            covarianceMetadata: this.manifest.getRiskS(this.marketProductGroup),
            correlationMatrix: this.manifest.getRiskR(this.marketProductGroup),
            markPrices: this.markPricesAccount
        };
        try {
            return await this.manifest.fields.dexProgram.methods.updateVarianceCache()// @ts-ignore
            .accounts(accounts).instruction();
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    getUpdateMarkPricesInstruction(products) {
        let markPriceAccounts = [];
        const { orderbooks: orderbooks  } = this.manifest.fields.mpgs.get(this.marketProductGroup.toBase58());
        for (let p of products){
            if (!p.hasOwnProperty("outright")) continue;
            const meta = $882b6d93070905b3$var$productToMeta(p);
            const productKey = meta.productKey;
            const orderbookPk = meta.orderbook;
            const orderbook = orderbooks.get(orderbookPk.toBase58());
            markPriceAccounts.push(productKey);
            if (this.hardcodedOracle != null) markPriceAccounts.push(this.hardcodedOracle);
            else markPriceAccounts.push(this.priceOracles.get(productKey.toBase58()));
            markPriceAccounts.push(orderbookPk);
            markPriceAccounts.push(orderbook.bids);
            markPriceAccounts.push(orderbook.asks);
        }
        const updateMarkPricesIx = this.manifest.fields.riskProgram.instruction.updateMarkPrices({
            accounts: {
                // @ts-ignore
                payer: this.manifest.fields.wallet.publicKey,
                marketProductGroup: this.marketProductGroup,
                markPrices: this.markPricesAccount
            }
        });
        for (const mp of markPriceAccounts)updateMarkPricesIx.keys.push({
            isSigner: false,
            isWritable: true,
            pubkey: mp
        });
        return updateMarkPricesIx;
    }
    async initializePrintTrade(isBid, size, price, counterparty) {
        // TODO product should be parameter
        const products = this.getProducts();
        let productAndIndex = null;
        for (let p of products.values()){
            productAndIndex = p;
            break;
        }
        if (productAndIndex === null) throw new Error("could not inintialize print trade because there are no products. see trader.getProducts()");
        let product = null;
        if (productAndIndex.product.hasOwnProperty("outright")) product = productAndIndex.product.outright.outright;
        else product = productAndIndex.product.combo.combo;
        const productPk = product.metadata.productKey;
        const side = isBid ? {
            bid: {}
        } : {
            ask: {}
        };
        const params = {
            productIndex: new (0, ($parcel$interopDefault($8zHUo$bnjs)))(productAndIndex.index),
            side: side,
            size: {
                m: size.m,
                exp: size.exp
            },
            price: {
                m: price.m,
                exp: price.exp
            }
        };
        const printTrade = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
            $882b6d93070905b3$require$Buffer.from("print_trade", "utf-8"),
            productPk.toBuffer(),
            this.traderRiskGroup.toBuffer(),
            counterparty.toBuffer(), 
        ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
        const accounts = {
            user: this.manifest.fields.wallet.publicKey,
            creator: this.traderRiskGroup,
            counterparty: counterparty,
            marketProductGroup: this.marketProductGroup,
            product: productPk,
            printTrade: printTrade,
            systemProgram: (0, $8zHUo$solanaweb3js.SystemProgram).programId
        };
        try {
            // console.log(params);
            // console.log(accounts);
            // for (const [k, v] of Object.entries(accounts)) {
            //     console.log(k, v.toBase58());
            // }
            await this.manifest.fields.dexProgram.methods.initializePrintTrade(params).accounts(accounts).rpc();
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    getOpenOrders(productNames) {
        const orders = new Set();
        let checkProduct = Array.isArray(productNames) && productNames.length > 0;
        for (const [name, { index: index , product: product  }] of this.getProducts()){
            const trimmedName = name.trim();
            if (checkProduct && !productNames.includes(trimmedName)) continue;
            const metadata = $882b6d93070905b3$var$productToMeta(product);
            const tickSize = $882b6d93070905b3$var$Fractional.From(metadata.tickSize);
            const priceOffset = $882b6d93070905b3$var$Fractional.From(metadata.priceOffset);
            const baseDecimals = new (0, ($parcel$interopDefault($8zHUo$bnjs)))(metadata.baseDecimals);
            let ptr = this.trg.openOrders.products[index].headIndex.toNumber();
            let order = this.trg.openOrders.orders[ptr]; // let order = trader_risk_group.open_orders.orders[ptr];
            if (order.prev.toNumber() !== $882b6d93070905b3$var$SENTINEL) throw new Error("openOrders state is invalid. expected first order.prev === SENTINEL\norder: " + JSON.stringify(order));
            while(ptr !== $882b6d93070905b3$var$SENTINEL){
                order = this.trg.openOrders.orders[ptr];
                if (order.id.isZero()) throw new Error("expected order id !== 0. order: " + JSON.stringify(order));
                orders.add(new $882b6d93070905b3$var$Order(order.id, trimmedName, index, $882b6d93070905b3$var$Manifest.orderIdToDexPrice(order.id, tickSize, priceOffset), new $882b6d93070905b3$var$Fractional(new (0, ($parcel$interopDefault($8zHUo$bnjs)))(order.qty), baseDecimals), $882b6d93070905b3$var$Manifest.orderIdIsBid(order.id)));
                ptr = order.next.toNumber();
            }
        }
        return orders;
    }
    // returns orderids as set of strings (order ids)
    getOpenOrderIds(productName) {
        const orderIds = new Set();
        for (const [name, { index: index , product: product  }] of this.getProducts()){
            if (name.trim() !== productName.trim()) continue;
            let ptr = this.trg.openOrders.products[index].headIndex.toNumber();
            let order = this.trg.openOrders.orders[ptr]; // let order = trader_risk_group.open_orders.orders[ptr];
            if (order.prev.toNumber() !== $882b6d93070905b3$var$SENTINEL) throw new Error("openOrders state is invalid. expected first order.prev === SENTINEL\norder: " + JSON.stringify(order));
            while(ptr !== $882b6d93070905b3$var$SENTINEL){
                order = this.trg.openOrders.orders[ptr];
                if (order.id.isZero()) throw new Error("expected order id !== 0. order: " + JSON.stringify(order));
                orderIds.add(order.id.toString());
                ptr = order.next.toNumber();
            }
        }
        return orderIds;
    }
    async cancelAllOrders(productNames, isUseCache = false) {
        if (!isUseCache) this.trg = await this.manifest.getTRG(this.traderRiskGroup);
        for (const [name, { index: index , product: product  }] of this.getProducts()){
            if (productNames.length > 0 && !productNames.includes(name.trim())) continue;
            const orderIds = [];
            let ptr = this.trg.openOrders.products[index].headIndex.toNumber();
            let order = this.trg.openOrders.orders[ptr];
            if (order.prev.toNumber() !== $882b6d93070905b3$var$SENTINEL) throw new Error("openOrders state is invalid. expected first order.prev === SENTINEL. order: " + JSON.stringify(order));
            while(ptr !== $882b6d93070905b3$var$SENTINEL){
                order = this.trg.openOrders.orders[ptr];
                if (order.id.isZero()) throw new Error("expected order id !== 0. order: " + JSON.stringify(order));
                orderIds.push(order.id);
                ptr = order.next.toNumber();
            }
            if (orderIds.length > 0) await this.batchCancelOrders(product, orderIds);
        }
    }
    async batchCancelOrders(product, orderIds, { onGettingBlockHashFn: onGettingBlockHashFn , onGotBlockHashFn: onGotBlockHashFn , onTxSentFn: onTxSentFn , onTxSuccessFn: onTxSuccessFn , onFailFn: onFailFn  } = {
        onGettingBlockHashFn: null,
        onGotBlockHashFn: null,
        onTxSentFn: null,
        onTxSuccessFn: null,
        onFailFn: null
    }, clientOrderId = null) {
        if (clientOrderId !== null) orderIds = [
            new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)
        ];
        const connection = this.manifest.fields.dexProgram.provider.connection;
        // @ts-ignore
        const wallet = this.manifest.fields.dexProgram.provider.wallet;
        let unwrappedProduct;
        if (product.hasOwnProperty("outright")) unwrappedProduct = product.outright.outright;
        else unwrappedProduct = product.combo.combo;
        const productPk = unwrappedProduct.metadata.productKey;
        const orderbookPk = unwrappedProduct.metadata.orderbook;
        const { orderbooks: orderbooks  } = this.manifest.fields.mpgs.get(this.marketProductGroup.toBase58());
        const orderbook = orderbooks.get(orderbookPk.toBase58());
        const accounts = {
            user: wallet.publicKey,
            traderRiskGroup: this.traderRiskGroup,
            marketProductGroup: this.marketProductGroup,
            product: productPk,
            aaobProgram: this.manifest.fields.aaob_id,
            orderbook: orderbookPk,
            marketSigner: orderbook.callerAuthority,
            eventQueue: orderbook.eventQueue,
            bids: orderbook.bids,
            asks: orderbook.asks,
            feeModelProgram: this.mpg.feeModelProgramId,
            feeModelConfigurationAcct: this.mpg.feeModelConfigurationAcct,
            traderFeeStateAcct: this.trg.feeStateAccount,
            feeOutputRegister: this.mpg.feeOutputRegister,
            riskEngineProgram: this.mpg.riskEngineProgramId,
            riskModelConfigurationAcct: this.mpg.riskModelConfigurationAcct,
            riskOutputRegister: this.mpg.riskOutputRegister,
            traderRiskStateAcct: this.trg.riskStateAccount,
            riskSigner: $882b6d93070905b3$var$Manifest.GetRiskAndFeeSigner(this.marketProductGroup),
            covarianceMetadata: this.manifest.getRiskS(this.marketProductGroup),
            correlationMatrix: this.manifest.getRiskR(this.marketProductGroup),
            markPrices: this.markPricesAccount
        };
        let varianceCacheUpdated = false;
        for(let i = 0; i < orderIds.length; i += $882b6d93070905b3$var$MAX_CANCELS_PER_TX){
            const lastChunk = i + $882b6d93070905b3$var$MAX_CANCELS_PER_TX >= orderIds.length;
            const orderIdsChunk = orderIds.slice(i, i + $882b6d93070905b3$var$MAX_CANCELS_PER_TX);
            try {
                const tx = new (0, $8zHUo$solanaweb3js.Transaction)().add((0, $8zHUo$solanaweb3js.ComputeBudgetProgram).setComputeUnitLimit({
                    units: $882b6d93070905b3$var$MAX_COMPUTE_UNITS
                }));
                for(let y = 0; y < orderIdsChunk.length; y++)tx.add(await this.manifest.fields.dexProgram.methods.cancelOrder({
                    orderId: orderIdsChunk[y],
                    noErr: true,
                    clientOrderId: clientOrderId ?? new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)
                })// @ts-ignore
                .accounts(accounts).signers([
                    wallet
                ]).instruction());
                // if (lastChunk && orderIdsChunk.length < MAX_CANCELS_PER_TX) {
                //     tx.add(this.getUpdateMarkPricesInstruction());
                //     tx.add(await this.getUpdateVarianceCacheInstruction());
                //     varianceCacheUpdated = true;
                // }
                if (onGettingBlockHashFn) onGettingBlockHashFn();
                let { blockhash: blockhash  } = await connection.getRecentBlockhash();
                tx.recentBlockhash = blockhash;
                if (onGotBlockHashFn) onGotBlockHashFn();
                tx.feePayer = wallet.publicKey;
                const cancelOrdersTx = await wallet.signTransaction(tx);
                const cancelOrdersSig = await connection.sendRawTransaction(cancelOrdersTx.serialize());
                if (onTxSentFn) onTxSentFn(cancelOrdersSig);
                await connection.confirmTransaction(cancelOrdersSig);
                if (onTxSuccessFn) onTxSuccessFn(cancelOrdersSig);
            } catch (e) {
                if (onFailFn) onFailFn(e);
                console.error(e);
                console.error(e.logs);
                return null;
            }
        }
        if (!varianceCacheUpdated) await this.updateVarianceCache();
    }
    async cancelOrders(productIndex, orderIds, isUseCache = true, { onGettingBlockHashFn: onGettingBlockHashFn , onGotBlockHashFn: onGotBlockHashFn , onTxSentFn: onTxSentFn , onTxSuccessFn: onTxSuccessFn , onFailFn: onFailFn  } = {
        onGettingBlockHashFn: null,
        onGotBlockHashFn: null,
        onTxSentFn: null,
        onTxSuccessFn: null,
        onFailFn: null
    }, clientOrderId = null) {
        if (clientOrderId !== null) orderIds = [
            new (0, ($parcel$interopDefault($8zHUo$bnjs)))(0)
        ];
        const connection = this.manifest.fields.dexProgram.provider.connection;
        // @ts-ignore
        const wallet = this.manifest.fields.dexProgram.provider.wallet;
        if (!isUseCache) this.trg = await this.manifest.getTRG(this.traderRiskGroup);
        for (const [name, { index: index , product: product  }] of this.getProducts()){
            if (index !== productIndex) continue;
            await this.batchCancelOrders(product, orderIds, {
                onGettingBlockHashFn: onGettingBlockHashFn,
                onGotBlockHashFn: onGotBlockHashFn,
                onTxSentFn: onTxSentFn,
                onTxSuccessFn: onTxSuccessFn,
                onFailFn: onFailFn
            }, clientOrderId);
            return;
        }
    }
    async deposit(usdcAmount) {
        try {
            const tradersVaultATA = await $882b6d93070905b3$var$Manifest.GetATAFromMPGObject(this.mpg, this.manifest.fields.wallet.publicKey);
            const vaultNotMint = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
                $882b6d93070905b3$require$Buffer.from("market_vault", "utf-8"),
                this.marketProductGroup.toBuffer()
            ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
            const capitalLimits = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
                $882b6d93070905b3$require$Buffer.from("capital_limits_state", "utf-8"),
                this.marketProductGroup.toBuffer()
            ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
            const accounts = {
                tokenProgram: (0, $8zHUo$solanaspltoken.TOKEN_PROGRAM_ID),
                user: this.manifest.fields.wallet.publicKey,
                userTokenAccount: tradersVaultATA,
                traderRiskGroup: this.traderRiskGroup,
                marketProductGroup: this.marketProductGroup,
                marketProductGroupVault: vaultNotMint,
                capitalLimits: capitalLimits,
                whitelistAtaAcct: capitalLimits
            };
            await this.manifest.fields.dexProgram.methods.depositFunds({
                quantity: {
                    m: usdcAmount.m,
                    exp: usdcAmount.exp
                }
            }).accounts(accounts).rpc();
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    async updateTraderRiskGroupOwner(newOwner, oldOwner = null) {
        try {
            if (oldOwner === null) oldOwner = this.manifest.fields.wallet.publicKey;
            const accounts = {
                owner: oldOwner,
                traderRiskGroup: this.traderRiskGroup,
                newOwner: newOwner
            };
            await this.manifest.fields.dexProgram.methods.updateTraderRiskGroupOwner().accounts(accounts).rpc();
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    async withdraw(usdcAmount) {
        try {
            const tradersVaultATA = await $882b6d93070905b3$var$Manifest.GetATAFromMPGObject(this.mpg, this.manifest.fields.wallet.publicKey);
            const tradersVaultATAInfo = await this.manifest.fields.connection.getAccountInfo(tradersVaultATA);
            let createAtaIx = null;
            if (!tradersVaultATAInfo) {
                createAtaIx = (0, $8zHUo$solanaspltoken.createAssociatedTokenAccountInstruction)(this.manifest.fields.wallet.publicKey, tradersVaultATA, this.manifest.fields.wallet.publicKey, this.mpg.vaultMint);
                console.log("creating traders ata for withdraw because it does not exist");
            }
            const vaultNotMint = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
                $882b6d93070905b3$require$Buffer.from("market_vault", "utf-8"),
                this.marketProductGroup.toBuffer()
            ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
            const capitalLimits = (0, $8zHUo$solanaweb3js.PublicKey).findProgramAddressSync([
                $882b6d93070905b3$require$Buffer.from("capital_limits_state", "utf-8"),
                this.marketProductGroup.toBuffer()
            ], new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID))[0];
            console.log("tradersVaultATA:", tradersVaultATA.toString(), "vaultNotMint:", vaultNotMint.toString(), "capitalLimits:", capitalLimits.toString());
            const accounts = {
                tokenProgram: (0, $8zHUo$solanaspltoken.TOKEN_PROGRAM_ID),
                user: this.manifest.fields.wallet.publicKey,
                userTokenAccount: tradersVaultATA,
                traderRiskGroup: this.traderRiskGroup,
                marketProductGroup: this.marketProductGroup,
                marketProductGroupVault: vaultNotMint,
                riskEngineProgram: this.manifest.fields.risk_id,
                riskModelConfigurationAcct: this.mpg.riskModelConfigurationAcct,
                riskOutputRegister: this.mpg.riskOutputRegister,
                traderRiskStateAcct: this.trg.riskStateAccount,
                riskSigner: $882b6d93070905b3$var$Manifest.GetRiskAndFeeSigner(this.marketProductGroup),
                covarianceMetadata: this.manifest.getRiskS(this.marketProductGroup),
                correlationMatrix: this.manifest.getRiskR(this.marketProductGroup),
                capitalLimits: capitalLimits,
                markPrices: this.markPricesAccount
            };
            const tx = new (0, $8zHUo$solanaweb3js.Transaction)();
            if (createAtaIx !== null) tx.add(createAtaIx);
            tx.add(this.manifest.fields.dexProgram.instruction.withdrawFunds({
                quantity: {
                    m: usdcAmount.m,
                    exp: usdcAmount.exp
                }
            }, {
                accounts: accounts
            }));
            const connection = this.manifest.fields.dexProgram.provider.connection;
            // @ts-ignore
            const wallet = this.manifest.fields.dexProgram.provider.wallet;
            let { blockhash: blockhash  } = await connection.getRecentBlockhash();
            tx.recentBlockhash = blockhash;
            tx.feePayer = wallet.publicKey;
            const signedTx = await wallet.signTransaction(tx);
            const signature = await connection.sendRawTransaction(signedTx.serialize());
            await connection.confirmTransaction(signature);
        } catch (e) {
            console.error(e);
            console.error(e.logs);
            return;
        }
    }
    async updateOrderbooks() {
        await this.manifest.updateOrderbooks(this.marketProductGroup);
    }
    disconnect() {
        this.trgSocket?.close();
        this.mpgSocket?.close();
        this.riskSocket?.close();
        this.markPricesSocket?.close();
    }
    streamUpdates(onUpdateFn) {
        this.disconnect();
        console.log(`streaming updates.... ${this.traderRiskGroup?.toBase58()} ${this.marketProductGroup?.toBase58()} ${this.trg.riskStateAccount?.toBase58()} ${this.markPricesAccount?.toBase58()}`);
        this.trgSocket = this.manifest.accountSubscribe(this.traderRiskGroup, async (data, manifest)=>await this.manifest.getTRGFromData(data), ((trg, slot)=>{
            this.trg = trg;
            console.log("slot", slot);
            this.trgSlot = slot;
            onUpdateFn($882b6d93070905b3$var$TraderUpdateType.TRG);
        }).bind(this));
        this.mpgSocket = this.manifest.accountSubscribe(this.marketProductGroup, async (data, manifest)=>await this.manifest.getMPGFromData(data), ((mpg)=>{
            this.mpg = mpg;
            onUpdateFn($882b6d93070905b3$var$TraderUpdateType.MPG);
        }).bind(this));
        this.riskSocket = this.manifest.accountSubscribe(this.trg.riskStateAccount, async (data, manifest)=>data, ((varianceCache)=>{
            this.varianceCache = varianceCache;
            onUpdateFn($882b6d93070905b3$var$TraderUpdateType.Risk);
        }).bind(this));
        this.markPricesSocket = this.manifest.accountSubscribe(this.markPricesAccount, async (data, manifest)=>await this.manifest.getMarkPricesFromData(data), ((markPrices)=>{
            this.markPrices = markPrices;
            onUpdateFn($882b6d93070905b3$var$TraderUpdateType.MarkPrices);
        }).bind(this));
    }
    async updateRisk() {
        this.varianceCache = await this.manifest.getVarianceCache(this.trg.riskStateAccount);
    }
    // gets BN representation of 'size' bytes at 'offset' within varianceCache
    getRiskNumber(offset, size, isSigned = true) {
        return $882b6d93070905b3$var$Manifest.GetRiskNumber(this.varianceCache, offset, size, isSigned);
    // if (isSigned) {
    //     return new BN(this.varianceCache.slice(offset,offset+size), undefined, 'le').fromTwos(size*8);
    // }
    // return new BN(this.varianceCache.slice(offset,offset+size), undefined, 'le');
    }
    getVarianceCacheUpdateSlot() {
        if (this.varianceCache) return this.getRiskNumber(16, 8, false).toNumber();
    }
    getPositionValue() {
        if (this.varianceCache) return $882b6d93070905b3$var$Manifest.FromFastInt(this.getRiskNumber(24, 16));
    }
    getTradedVariance() {
        if (this.varianceCache) return $882b6d93070905b3$var$Manifest.FromFastInt(this.getRiskNumber(40, 16));
    }
    getOpenOrderVariance() {
        if (this.varianceCache) return $882b6d93070905b3$var$Manifest.FromFastInt(this.getRiskNumber(56, 16));
    }
    getCashBalance() {
        return $882b6d93070905b3$var$Fractional.From(this.trg.cashBalance);
    }
    getPendingCashBalance() {
        return $882b6d93070905b3$var$Fractional.From(this.trg.pendingCashBalance);
    }
    getNetCash() {
        return this.getCashBalance().add(this.getPendingCashBalance());
    }
    getPortfolioValue() {
        if (this.varianceCache) return this.getPositionValue().add(this.getNetCash());
    }
    getTotalDeposited() {
        return $882b6d93070905b3$var$Fractional.From(this.trg.totalDeposited);
    }
    getTotalWithdrawn() {
        return $882b6d93070905b3$var$Fractional.From(this.trg.totalWithdrawn);
    }
    getDepositedCollateral() {
        return this.getTotalDeposited().sub(this.getTotalWithdrawn());
    }
    getPnL() {
        return this.getPortfolioValue().sub(this.getDepositedCollateral());
    }
    // getRequiredMaintenanceMargin gets margin required to prevent liquidation
    getRequiredMaintenanceMargin() {
        if (this.varianceCache) {
            const portfolioStd = (0, ($parcel$interopDefault($8zHUo$bnjs))).max(this.getTradedVariance(), this.getOpenOrderVariance()).sqrt();
            return portfolioStd.mul($882b6d93070905b3$var$NUM_LIQUIDATION_STDS);
        }
    }
    // getRequiredMaintenanceMarginWithoutOpenOrders gets margin required to prevent liquidation, assuming you don't have open orders
    getRequiredMaintenanceMarginWithoutOpenOrders() {
        if (this.varianceCache) {
            const portfolioStd = this.getTradedVariance().sqrt();
            return portfolioStd.mul($882b6d93070905b3$var$NUM_LIQUIDATION_STDS);
        }
    }
    // getRequiredInitialMargin gets margin required to prevent "unhealthy" state
    getRequiredInitialMargin() {
        if (this.varianceCache) {
            const portfolioStd = (0, ($parcel$interopDefault($8zHUo$bnjs))).max(this.getTradedVariance(), this.getOpenOrderVariance()).sqrt();
            return portfolioStd.mul($882b6d93070905b3$var$NUM_UNHEALTHY_STDS);
        }
    }
    // getRequiredInitialMarginWithoutOpenOrders gets margin required to prevent "unhealthy" state
    getRequiredInitialMarginWithoutOpenOrders() {
        if (this.varianceCache) {
            const portfolioStd = this.getTradedVariance().sqrt();
            return portfolioStd.mul($882b6d93070905b3$var$NUM_UNHEALTHY_STDS);
        }
    }
    // getExcessMaintenanceMargin gets margin in excess of liquidation threshold
    getExcessMaintenanceMargin() {
        if (this.varianceCache) {
            const portfolioStd = (0, ($parcel$interopDefault($8zHUo$bnjs))).max(this.getTradedVariance(), this.getOpenOrderVariance()).sqrt();
            return this.getPortfolioValue().sub(portfolioStd.mul($882b6d93070905b3$var$NUM_LIQUIDATION_STDS));
        }
    }
    // getExcessInitialMargin gets margin in excess of "unhealthy" threshold
    getExcessInitialMargin() {
        if (this.varianceCache) {
            const portfolioStd = (0, ($parcel$interopDefault($8zHUo$bnjs))).max(this.getTradedVariance(), this.getOpenOrderVariance()).sqrt();
            return this.getPortfolioValue().sub(portfolioStd.mul($882b6d93070905b3$var$NUM_UNHEALTHY_STDS));
        }
    }
    // getExcessMarginWithoutOpenOrders gets margin in excess of liquidation threshold, not counting open orders
    getExcessMaintenanceMarginWithoutOpenOrders() {
        if (this.varianceCache) {
            const portfolioStd = this.getTradedVariance().sqrt();
            return this.getPortfolioValue().sub(portfolioStd.mul($882b6d93070905b3$var$NUM_LIQUIDATION_STDS));
        }
    }
    // getExcessInitialMarginWithoutOpenOrders gets margin in excess of "unhealthy" threshold which prevents order placement, not counting open orders
    getExcessInitialMarginWithoutOpenOrders() {
        if (this.varianceCache) {
            const portfolioStd = this.getTradedVariance().sqrt();
            return this.getPortfolioValue().sub(portfolioStd.mul($882b6d93070905b3$var$NUM_UNHEALTHY_STDS));
        }
    }
    async updateMarkPrices() {
        this.markPricesAccount = this.manifest.getMarkPricesAccount(this.marketProductGroup);
        this.markPrices = await this.manifest.getMarkPrices(this.markPricesAccount);
        this.hardcodedOracle = null;
        if (this.markPrices.isHardcodedOracle) this.hardcodedOracle = this.markPrices.hardcodedOracle;
        this.priceOracles = new Map();
        for (let { index: index , product: p  } of this.getProducts().values()){
            if (!p.hasOwnProperty("outright")) continue;
            const productKey = p.outright.outright.metadata.productKey;
            try {
                // it's okay to fail to load derivative metadata
                // in the failure case, we move on silently and fail later when the dm is actually used
                const dm = await this.manifest.getDerivativeMetadata(productKey);
                this.priceOracles.set(productKey.toBase58(), dm.priceOracle);
            } catch (error) {
            // console.error('when attempting to get mark prices accounts, failed to get derivative metadata for product', productKey.toBase58(), 'with error', error);
            }
        }
    }
    async update(isUpdateMPG = true) {
        this.trg = await this.manifest.getTRG(this.traderRiskGroup);
        await this.updateRisk();
        if (isUpdateMPG) {
            this.marketProductGroup = new (0, $8zHUo$solanaweb3js.PublicKey)(this.trg.marketProductGroup.toBase58());
            this.mpg = await this.manifest.getMPG(this.marketProductGroup);
        }
        await this.updateMarkPrices(); // specifcally do this AFTER updating MPG
    }
    async connect(streamUpdatesCallback, initialUpdateCallback) {
        this.isPaused = false;
        this.trgDate = null;
        this.mpgDate = null;
        this.riskDate = null;
        this.markPricesDate = null;
        this.trgSlot = null;
        this.mpgSlot = null;
        this.riskSlot = null;
        this.markPricesSlot = null;
        await this.update();
        if (typeof initialUpdateCallback === "function") initialUpdateCallback();
        if (!this.skipThingsThatRequireWalletConnection) {
            if (this.trg.owner.toBase58() !== this.manifest.fields.wallet.publicKey.toBase58()) throw new Error("Expected this.trg.owner === given wallet pubkey. this.trg.owner: " + this.trg.owner.toBase58() + ". wallet pubkey: " + this.manifest.fields.wallet.publicKey.toBase58());
        }
        if (typeof streamUpdatesCallback === "function") this.streamUpdates(streamUpdatesCallback);
        await this.updateOrderbooks();
    }
}
function $882b6d93070905b3$var$createDexProgram(provider) {
    return new (0, $8zHUo$projectserumanchor.Program)($882b6d93070905b3$var$DEX_IDL, new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$DEX_ID), provider);
}
function $882b6d93070905b3$var$createInstrumentsProgram(provider) {
    return new (0, $8zHUo$projectserumanchor.Program)($882b6d93070905b3$var$INSTRUMENTS_IDL, new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$INSTRUMENTS_ID), provider);
}
function $882b6d93070905b3$var$createRiskProgram(provider) {
    return new (0, $8zHUo$projectserumanchor.Program)($882b6d93070905b3$var$RISK_IDL, new (0, $8zHUo$solanaweb3js.PublicKey)($882b6d93070905b3$var$RISK_ID), provider);
}
var $882b6d93070905b3$export$2e2bcd8739ae039 = {
    bytesToString: $882b6d93070905b3$var$bytesToString,
    Fractional: $882b6d93070905b3$var$Fractional,
    getManifest: $882b6d93070905b3$var$getManifest,
    getPriceDecimals: $882b6d93070905b3$var$getPriceDecimals,
    Manifest: $882b6d93070905b3$var$Manifest,
    productStatus: $882b6d93070905b3$var$productStatus,
    productToMeta: $882b6d93070905b3$var$productToMeta,
    rpc2manifest: $882b6d93070905b3$var$rpc2manifest,
    Trader: $882b6d93070905b3$var$Trader,
    TraderUpdateType: $882b6d93070905b3$var$TraderUpdateType
};


//# sourceMappingURL=main.js.map
