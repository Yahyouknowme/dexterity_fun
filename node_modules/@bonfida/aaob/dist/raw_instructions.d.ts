import BN from "bn.js";
import { Schema } from "borsh";
import { PublicKey, TransactionInstruction } from "@solana/web3.js";
export interface AccountKey {
    pubkey: PublicKey;
    isSigner: boolean;
    isWritable: boolean;
}
export declare class cancelOrderInstruction {
    tag: number;
    orderId: BN;
    static schema: Schema;
    constructor(obj: {
        orderId: BN;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, market: PublicKey, eventQueue: PublicKey, bids: PublicKey, asks: PublicKey, authority: PublicKey): TransactionInstruction;
}
export declare class newOrderInstruction {
    tag: number;
    maxBaseQty: BN;
    maxQuoteQty: BN;
    limitPrice: BN;
    side: number;
    matchLimit: BN;
    callbackInfo: number;
    postOnly: number;
    postAllowed: number;
    selfTradeBehavior: number;
    static schema: Schema;
    constructor(obj: {
        maxBaseQty: BN;
        maxQuoteQty: BN;
        limitPrice: BN;
        side: number;
        matchLimit: BN;
        callbackInfo: number;
        postOnly: number;
        postAllowed: number;
        selfTradeBehavior: number;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, market: PublicKey, eventQueue: PublicKey, bids: PublicKey, asks: PublicKey, authority: PublicKey): TransactionInstruction;
}
export declare class consumeEventsInstruction {
    tag: number;
    numberOfEntriesToConsume: BN;
    static schema: Schema;
    constructor(obj: {
        numberOfEntriesToConsume: BN;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, market: PublicKey, eventQueue: PublicKey, authority: PublicKey, rewardTarget: PublicKey): TransactionInstruction;
}
export declare class createMarketInstruction {
    tag: number;
    callerAuthority: Uint8Array;
    callbackInfoLen: BN;
    callbackIdLen: BN;
    minBaseOrderSize: BN;
    tickSize: BN;
    crankerReward: BN;
    static schema: Schema;
    constructor(obj: {
        callerAuthority: Uint8Array;
        callbackInfoLen: BN;
        callbackIdLen: BN;
        minBaseOrderSize: BN;
        tickSize: BN;
        crankerReward: BN;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, market: PublicKey, eventQueue: PublicKey, bids: PublicKey, asks: PublicKey): TransactionInstruction;
}
export declare class closeMarketInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, market: PublicKey, eventQueue: PublicKey, bids: PublicKey, asks: PublicKey, authority: PublicKey, lamportsTargetAccount: PublicKey): TransactionInstruction;
}
