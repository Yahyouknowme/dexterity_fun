"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketState = exports.SelfTradeBehavior = exports.AccountTag = void 0;
const web3_js_1 = require("@solana/web3.js");
const borsh_1 = require("borsh");
const slab_1 = require("./slab");
const bn_js_1 = __importDefault(require("bn.js"));
///////////////////////////////////////////////
////// Market State
///////////////////////////////////////////////
/** @enum {number} */
var AccountTag;
(function (AccountTag) {
    AccountTag[AccountTag["Initialized"] = 0] = "Initialized";
    AccountTag[AccountTag["Market"] = 1] = "Market";
    AccountTag[AccountTag["EventQueue"] = 2] = "EventQueue";
    AccountTag[AccountTag["Bids"] = 3] = "Bids";
    AccountTag[AccountTag["Asks"] = 4] = "Asks";
})(AccountTag = exports.AccountTag || (exports.AccountTag = {}));
/** @enum {number} */
var SelfTradeBehavior;
(function (SelfTradeBehavior) {
    SelfTradeBehavior[SelfTradeBehavior["DecrementTake"] = 0] = "DecrementTake";
    SelfTradeBehavior[SelfTradeBehavior["CancelProvide"] = 1] = "CancelProvide";
    SelfTradeBehavior[SelfTradeBehavior["AbortTransaction"] = 2] = "AbortTransaction";
})(SelfTradeBehavior = exports.SelfTradeBehavior || (exports.SelfTradeBehavior = {}));
/**
 * MarketState object
 */
class MarketState {
    constructor(arg) {
        this.tag = new bn_js_1.default(arg.tag);
        this.callerAuthority = new web3_js_1.PublicKey(arg.callerAuthority);
        this.eventQueue = new web3_js_1.PublicKey(arg.eventQueue);
        this.bids = new web3_js_1.PublicKey(arg.bids);
        this.asks = new web3_js_1.PublicKey(arg.asks);
        this.callBackInfoLen = arg.callBackInfoLen;
        this.callBackIdLen = arg.callBackIdLen;
        this.feeBudget = arg.feeBudget;
        this.initialLamports = arg.initialLamports;
        this.minOrderSize = arg.minOrderSize;
        this.tickSize = arg.tickSize;
        this.crankerReward = arg.crankerReward;
    }
    /**
     * Loads a market from its address
     * @param connection The solana connection object to the RPC node
     * @param market The address of the market to load
     * @returns Returns a market state object
     */
    static async retrieve(connection, market, commitment) {
        const accountInfo = await connection.getAccountInfo(market, commitment);
        if (!(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.data)) {
            throw new Error("Invalid account provided");
        }
        return borsh_1.deserializeUnchecked(this.schema, MarketState, accountInfo.data);
    }
    /**
     * Loads the bids Slab associated to the market
     * @param connection The solana connection object to the RPC node
     * @returns Returns a Slab object
     */
    async loadBidsSlab(connection, commitment) {
        const bidsInfo = await connection.getAccountInfo(this.bids, commitment);
        if (!(bidsInfo === null || bidsInfo === void 0 ? void 0 : bidsInfo.data)) {
            throw new Error("Invalid bids account");
        }
        return slab_1.Slab.deserialize(bidsInfo.data, this.callBackInfoLen);
    }
    /**
     * Loads the asks Slab associated to the market
     * @param connection The solana connection object to the RPC node
     * @returns Returns a Slab object
     */
    async loadAsksSlab(connection, commitment) {
        const asksInfo = await connection.getAccountInfo(this.asks, commitment);
        if (!(asksInfo === null || asksInfo === void 0 ? void 0 : asksInfo.data)) {
            throw new Error("Invalid asks account");
        }
        return slab_1.Slab.deserialize(asksInfo.data, this.callBackInfoLen);
    }
}
exports.MarketState = MarketState;
MarketState.LEN = 192;
MarketState.schema = new Map([
    [
        MarketState,
        {
            kind: "struct",
            fields: [
                ["tag", "u64"],
                ["callerAuthority", [32]],
                ["eventQueue", [32]],
                ["bids", [32]],
                ["asks", [32]],
                ["callBackIdLen", "u64"],
                ["callBackInfoLen", "u64"],
                ["feeBudget", "u64"],
                ["initialLamports", "u64"],
                ["minOrderSize", "u64"],
                ["tickSize", "u64"],
                ["crankerReward", "u64"],
            ],
        },
    ],
]);
//# sourceMappingURL=market_state.js.map