import { Connection, PublicKey, Commitment } from "@solana/web3.js";
import { Schema } from "borsh";
import { Slab } from "./slab";
import BN from "bn.js";
/** @enum {number} */
export declare enum AccountTag {
    Initialized = 0,
    Market = 1,
    EventQueue = 2,
    Bids = 3,
    Asks = 4
}
/** @enum {number} */
export declare enum SelfTradeBehavior {
    DecrementTake = 0,
    CancelProvide = 1,
    AbortTransaction = 2
}
/**
 * MarketState object
 */
export declare class MarketState {
    tag: BN;
    callerAuthority: PublicKey;
    eventQueue: PublicKey;
    bids: PublicKey;
    asks: PublicKey;
    callBackIdLen: BN;
    callBackInfoLen: BN;
    feeBudget: BN;
    initialLamports: BN;
    minOrderSize: BN;
    tickSize: BN;
    crankerReward: BN;
    static LEN: number;
    static schema: Schema;
    constructor(arg: {
        tag: AccountTag;
        callerAuthority: Uint8Array;
        eventQueue: Uint8Array;
        bids: Uint8Array;
        asks: Uint8Array;
        callBackInfoLen: BN;
        callBackIdLen: BN;
        feeBudget: BN;
        initialLamports: BN;
        minOrderSize: BN;
        tickSize: BN;
        crankerReward: BN;
    });
    /**
     * Loads a market from its address
     * @param connection The solana connection object to the RPC node
     * @param market The address of the market to load
     * @returns Returns a market state object
     */
    static retrieve(connection: Connection, market: PublicKey, commitment?: Commitment): Promise<MarketState>;
    /**
     * Loads the bids Slab associated to the market
     * @param connection The solana connection object to the RPC node
     * @returns Returns a Slab object
     */
    loadBidsSlab(connection: Connection, commitment?: Commitment): Promise<Slab>;
    /**
     * Loads the asks Slab associated to the market
     * @param connection The solana connection object to the RPC node
     * @returns Returns a Slab object
     */
    loadAsksSlab(connection: Connection, commitment?: Commitment): Promise<Slab>;
}
